                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init
                             13 	.globl _renderCompass
                             14 	.globl _uncompress_theme_textures
                             15 	.globl _draw_minimap_to_buffer
                             16 	.globl _render_draw_to_buffer
                             17 	.globl _generate_level
                             18 	.globl _init_generator
                             19 	.globl _cpct_setPALColour
                             20 	.globl _cpct_setPalette
                             21 	.globl _cpct_fw2hw
                             22 	.globl _cpct_setVideoMode
                             23 	.globl _cpct_drawSprite
                             24 	.globl _cpct_isKeyPressed
                             25 	.globl _cpct_scanKeyboard_f
                             26 	.globl _cpct_memset
                             27 	.globl _cpct_disableFirmware
                             28 ;--------------------------------------------------------
                             29 ; special function registers
                             30 ;--------------------------------------------------------
                             31 ;--------------------------------------------------------
                             32 ; ram data
                             33 ;--------------------------------------------------------
                             34 	.area _DATA
                             35 ;--------------------------------------------------------
                             36 ; ram data
                             37 ;--------------------------------------------------------
                             38 	.area _INITIALIZED
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DABS (ABS)
                             43 ;--------------------------------------------------------
                             44 ; global & static initialisations
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _GSINIT
                             48 	.area _GSFINAL
                             49 	.area _GSINIT
                             50 ;--------------------------------------------------------
                             51 ; Home
                             52 ;--------------------------------------------------------
                             53 	.area _HOME
                             54 	.area _HOME
                             55 ;--------------------------------------------------------
                             56 ; code
                             57 ;--------------------------------------------------------
                             58 	.area _CODE
                             59 ;src/main.c:28: void init(){
                             60 ;	---------------------------------
                             61 ; Function init
                             62 ; ---------------------------------
   0000                      63 _init::
                             64 ;src/main.c:29: cpct_disableFirmware();
   0000 CDr00r00      [17]   65 	call	_cpct_disableFirmware
                             66 ;src/main.c:30: cpct_setVideoMode(0);
   0003 2E 00         [ 7]   67 	ld	l,#0x00
   0005 CDr00r00      [17]   68 	call	_cpct_setVideoMode
                             69 ;src/main.c:31: cpct_fw2hw(g_palette,16);
   0008 21 10 00      [10]   70 	ld	hl,#0x0010
   000B E5            [11]   71 	push	hl
   000C 21r00r00      [10]   72 	ld	hl,#_g_palette
   000F E5            [11]   73 	push	hl
   0010 CDr00r00      [17]   74 	call	_cpct_fw2hw
                             75 ;src/main.c:32: cpct_setPalette(g_palette,16);
   0013 21 10 00      [10]   76 	ld	hl,#0x0010
   0016 E5            [11]   77 	push	hl
   0017 21r00r00      [10]   78 	ld	hl,#_g_palette
   001A E5            [11]   79 	push	hl
   001B CDr00r00      [17]   80 	call	_cpct_setPalette
                             81 ;src/main.c:33: cpct_setBorder(g_palette[12]);
   001E 21r0Cr00      [10]   82 	ld	hl, #_g_palette + 12
   0021 46            [ 7]   83 	ld	b,(hl)
   0022 C5            [11]   84 	push	bc
   0023 33            [ 6]   85 	inc	sp
   0024 3E 10         [ 7]   86 	ld	a,#0x10
   0026 F5            [11]   87 	push	af
   0027 33            [ 6]   88 	inc	sp
   0028 CDr00r00      [17]   89 	call	_cpct_setPALColour
                             90 ;src/main.c:35: cpct_memset(CPCT_VMEM_START, g_colors[12], 0x4000);
   002B 21r0Cr00      [10]   91 	ld	hl, #(_g_colors + 0x000c) + 0
   002E 46            [ 7]   92 	ld	b,(hl)
   002F 21 00 40      [10]   93 	ld	hl,#0x4000
   0032 E5            [11]   94 	push	hl
   0033 C5            [11]   95 	push	bc
   0034 33            [ 6]   96 	inc	sp
   0035 26 C0         [ 7]   97 	ld	h, #0xC0
   0037 E5            [11]   98 	push	hl
   0038 CDr00r00      [17]   99 	call	_cpct_memset
   003B C9            [10]  100 	ret
                            101 ;src/main.c:38: void main(void) {
                            102 ;	---------------------------------
                            103 ; Function main
                            104 ; ---------------------------------
   003C                     105 _main::
                            106 ;src/main.c:39: init();
   003C CDr00r00      [17]  107 	call	_init
                            108 ;src/main.c:40: init_generator();
   003F CDr00r00      [17]  109 	call	_init_generator
                            110 ;src/main.c:41: uncompress_theme_textures(0);
   0042 AF            [ 4]  111 	xor	a, a
   0043 F5            [11]  112 	push	af
   0044 33            [ 6]  113 	inc	sp
   0045 CDr00r00      [17]  114 	call	_uncompress_theme_textures
   0048 33            [ 6]  115 	inc	sp
                            116 ;src/main.c:42: generate_level();
   0049 CDr00r00      [17]  117 	call	_generate_level
                            118 ;src/main.c:43: render_draw_to_buffer();
   004C CDr00r00      [17]  119 	call	_render_draw_to_buffer
                            120 ;src/main.c:44: cpct_drawSprite(SCREEN_TEXTURE_BUFFER,SCREEN_TEXTURE_POSITION,SCREEN_TEXTURE_WIDTH_BYTES,SCREEN_TEXTURE_HEIGHT);
   004F 21 28 64      [10]  121 	ld	hl,#0x6428
   0052 E5            [11]  122 	push	hl
   0053 21 14 C0      [10]  123 	ld	hl,#0xC014
   0056 E5            [11]  124 	push	hl
   0057 21 40 2B      [10]  125 	ld	hl,#0x2B40
   005A E5            [11]  126 	push	hl
   005B CDr00r00      [17]  127 	call	_cpct_drawSprite
                            128 ;src/main.c:45: draw_minimap_to_buffer();
   005E CDr00r00      [17]  129 	call	_draw_minimap_to_buffer
                            130 ;src/main.c:46: cpct_drawSprite(MINIMAP_BUFFER,MINIMAP_POSITION,MINIMAP_WIDTH_BYTES,MINIMAP_HEIGHT_BYTES);
   0061 21 10 40      [10]  131 	ld	hl,#0x4010
   0064 E5            [11]  132 	push	hl
   0065 21 70 C5      [10]  133 	ld	hl,#0xC570
   0068 E5            [11]  134 	push	hl
   0069 21 40 1C      [10]  135 	ld	hl,#0x1C40
   006C E5            [11]  136 	push	hl
   006D CDr00r00      [17]  137 	call	_cpct_drawSprite
                            138 ;src/main.c:49: while(1) {
   0070                     139 00115$:
                            140 ;src/main.c:50: u8 movement = 0;
   0070 0E 00         [ 7]  141 	ld	c,#0x00
                            142 ;src/main.c:51: cpct_scanKeyboard_f();
   0072 C5            [11]  143 	push	bc
   0073 CDr00r00      [17]  144 	call	_cpct_scanKeyboard_f
   0076 21 01 01      [10]  145 	ld	hl,#0x0101
   0079 CDr00r00      [17]  146 	call	_cpct_isKeyPressed
   007C 5D            [ 4]  147 	ld	e,l
   007D C1            [10]  148 	pop	bc
   007E 7B            [ 4]  149 	ld	a,e
   007F B7            [ 4]  150 	or	a, a
   0080 28 33         [12]  151 	jr	Z,00110$
                            152 ;src/main.c:53: *(u8*)&(PLAYER_directionIndex)=(PLAYER_directionIndex+2)&7;
   0082 01r00r00      [10]  153 	ld	bc,#_PLAYER_directionIndex+0
   0085 3Ar00r00      [13]  154 	ld	a,(#_PLAYER_directionIndex + 0)
   0088 C6 02         [ 7]  155 	add	a, #0x02
   008A E6 07         [ 7]  156 	and	a, #0x07
   008C 02            [ 7]  157 	ld	(bc),a
                            158 ;src/main.c:54: *(i8*)&(PLAYER_direction.x) = PLAYER_directionArray[(PLAYER_directionIndex)];
   008D 01r00r00      [10]  159 	ld	bc,#_PLAYER_directionArray+0
   0090 FD 21r00r00   [14]  160 	ld	iy,#_PLAYER_directionIndex
   0094 FD 6E 00      [19]  161 	ld	l, 0 (iy)
   0097 26 00         [ 7]  162 	ld	h,#0x00
   0099 09            [11]  163 	add	hl,bc
   009A 5E            [ 7]  164 	ld	e,(hl)
   009B 21r00r00      [10]  165 	ld	hl,#_PLAYER_direction
   009E 73            [ 7]  166 	ld	(hl),e
                            167 ;src/main.c:55: *(i8*)&(PLAYER_direction.y) = PLAYER_directionArray[((PLAYER_directionIndex)+1)];
   009F 21r00r00      [10]  168 	ld	hl,#_PLAYER_directionIndex + 0
   00A2 5E            [ 7]  169 	ld	e, (hl)
   00A3 1C            [ 4]  170 	inc	e
   00A4 6B            [ 4]  171 	ld	l,e
   00A5 26 00         [ 7]  172 	ld	h,#0x00
   00A7 09            [11]  173 	add	hl,bc
   00A8 4E            [ 7]  174 	ld	c,(hl)
   00A9 21r01r00      [10]  175 	ld	hl,#(_PLAYER_direction + 0x0001)
   00AC 71            [ 7]  176 	ld	(hl),c
                            177 ;src/main.c:56: renderCompass();
   00AD CDr00r00      [17]  178 	call	_renderCompass
                            179 ;src/main.c:57: movement =1;
   00B0 0E 01         [ 7]  180 	ld	c,#0x01
   00B2 C3r47r01      [10]  181 	jp	00111$
   00B5                     182 00110$:
                            183 ;src/main.c:59: else if(cpct_isKeyPressed(Key_CursorRight)){
   00B5 C5            [11]  184 	push	bc
   00B6 21 00 02      [10]  185 	ld	hl,#0x0200
   00B9 CDr00r00      [17]  186 	call	_cpct_isKeyPressed
   00BC C1            [10]  187 	pop	bc
   00BD 7D            [ 4]  188 	ld	a,l
   00BE B7            [ 4]  189 	or	a, a
   00BF 28 34         [12]  190 	jr	Z,00107$
                            191 ;src/main.c:60: *(u8*)&(PLAYER_directionIndex)=(PLAYER_directionIndex-2)&7;
   00C1 01r00r00      [10]  192 	ld	bc,#_PLAYER_directionIndex+0
   00C4 3Ar00r00      [13]  193 	ld	a,(#_PLAYER_directionIndex + 0)
   00C7 C6 FE         [ 7]  194 	add	a,#0xFE
   00C9 E6 07         [ 7]  195 	and	a, #0x07
   00CB 02            [ 7]  196 	ld	(bc),a
                            197 ;src/main.c:61: *(i8*)&(PLAYER_direction.x) = PLAYER_directionArray[(PLAYER_directionIndex)];
   00CC 01r00r00      [10]  198 	ld	bc,#_PLAYER_direction+0
   00CF 11r00r00      [10]  199 	ld	de,#_PLAYER_directionArray+0
   00D2 FD 21r00r00   [14]  200 	ld	iy,#_PLAYER_directionIndex
   00D6 FD 6E 00      [19]  201 	ld	l,0 (iy)
   00D9 26 00         [ 7]  202 	ld	h,#0x00
   00DB 19            [11]  203 	add	hl,de
   00DC 7E            [ 7]  204 	ld	a,(hl)
   00DD 02            [ 7]  205 	ld	(bc),a
                            206 ;src/main.c:62: *(i8*)&(PLAYER_direction.y) = PLAYER_directionArray[((PLAYER_directionIndex)+1)];
   00DE 01r01r00      [10]  207 	ld	bc,#_PLAYER_direction+1
   00E1 FD 21r00r00   [14]  208 	ld	iy,#_PLAYER_directionIndex
   00E5 FD 6E 00      [19]  209 	ld	l,0 (iy)
   00E8 2C            [ 4]  210 	inc	l
   00E9 26 00         [ 7]  211 	ld	h,#0x00
   00EB 19            [11]  212 	add	hl,de
   00EC 7E            [ 7]  213 	ld	a,(hl)
   00ED 02            [ 7]  214 	ld	(bc),a
                            215 ;src/main.c:63: renderCompass();
   00EE CDr00r00      [17]  216 	call	_renderCompass
                            217 ;src/main.c:64: movement =1;
   00F1 0E 01         [ 7]  218 	ld	c,#0x01
   00F3 18 52         [12]  219 	jr	00111$
   00F5                     220 00107$:
                            221 ;src/main.c:66: else if(cpct_isKeyPressed(Key_CursorUp)){
   00F5 C5            [11]  222 	push	bc
   00F6 21 00 01      [10]  223 	ld	hl,#0x0100
   00F9 CDr00r00      [17]  224 	call	_cpct_isKeyPressed
   00FC C1            [10]  225 	pop	bc
   00FD 7D            [ 4]  226 	ld	a,l
   00FE B7            [ 4]  227 	or	a, a
   00FF 28 1E         [12]  228 	jr	Z,00104$
                            229 ;src/main.c:67: *(i8*)&(PLAYER_position.x) = PLAYER_position.x + PLAYER_direction.x;
   0101 21r00r00      [10]  230 	ld	hl,#_PLAYER_position+0
   0104 4D            [ 4]  231 	ld	c, l
   0105 44            [ 4]  232 	ld	b, h
   0106 5E            [ 7]  233 	ld	e,(hl)
   0107 21r00r00      [10]  234 	ld	hl, #_PLAYER_direction + 0
   010A 6E            [ 7]  235 	ld	l,(hl)
   010B 7B            [ 4]  236 	ld	a,e
   010C 85            [ 4]  237 	add	a, l
   010D 02            [ 7]  238 	ld	(bc),a
                            239 ;src/main.c:68: *(i8*)&(PLAYER_position.y) = PLAYER_position.y + PLAYER_direction.y;
   010E 21r01r00      [10]  240 	ld	hl,#_PLAYER_position+1
   0111 4D            [ 4]  241 	ld	c, l
   0112 44            [ 4]  242 	ld	b, h
   0113 5E            [ 7]  243 	ld	e,(hl)
   0114 21r01r00      [10]  244 	ld	hl, #(_PLAYER_direction + 0x0001) + 0
   0117 6E            [ 7]  245 	ld	l,(hl)
   0118 7B            [ 4]  246 	ld	a,e
   0119 85            [ 4]  247 	add	a, l
   011A 02            [ 7]  248 	ld	(bc),a
                            249 ;src/main.c:70: movement =1;
   011B 0E 01         [ 7]  250 	ld	c,#0x01
   011D 18 28         [12]  251 	jr	00111$
   011F                     252 00104$:
                            253 ;src/main.c:72: else if(cpct_isKeyPressed(Key_CursorDown)){
   011F C5            [11]  254 	push	bc
   0120 21 00 04      [10]  255 	ld	hl,#0x0400
   0123 CDr00r00      [17]  256 	call	_cpct_isKeyPressed
   0126 C1            [10]  257 	pop	bc
   0127 7D            [ 4]  258 	ld	a,l
   0128 B7            [ 4]  259 	or	a, a
   0129 28 1C         [12]  260 	jr	Z,00111$
                            261 ;src/main.c:73: *(i8*)&(PLAYER_position.x) = PLAYER_position.x - PLAYER_direction.x;
   012B 21r00r00      [10]  262 	ld	hl,#_PLAYER_position+0
   012E 4D            [ 4]  263 	ld	c, l
   012F 44            [ 4]  264 	ld	b, h
   0130 5E            [ 7]  265 	ld	e,(hl)
   0131 21r00r00      [10]  266 	ld	hl, #_PLAYER_direction + 0
   0134 6E            [ 7]  267 	ld	l,(hl)
   0135 7B            [ 4]  268 	ld	a,e
   0136 95            [ 4]  269 	sub	a, l
   0137 02            [ 7]  270 	ld	(bc),a
                            271 ;src/main.c:74: *(i8*)&(PLAYER_position.y) = PLAYER_position.y - PLAYER_direction.y;
   0138 21r01r00      [10]  272 	ld	hl,#_PLAYER_position+1
   013B 4D            [ 4]  273 	ld	c, l
   013C 44            [ 4]  274 	ld	b, h
   013D 5E            [ 7]  275 	ld	e,(hl)
   013E 21r01r00      [10]  276 	ld	hl, #(_PLAYER_direction + 0x0001) + 0
   0141 6E            [ 7]  277 	ld	l,(hl)
   0142 7B            [ 4]  278 	ld	a,e
   0143 95            [ 4]  279 	sub	a, l
   0144 02            [ 7]  280 	ld	(bc),a
                            281 ;src/main.c:76: movement =1;
   0145 0E 01         [ 7]  282 	ld	c,#0x01
   0147                     283 00111$:
                            284 ;src/main.c:78: if(movement){
   0147 79            [ 4]  285 	ld	a,c
   0148 B7            [ 4]  286 	or	a, a
   0149 CAr70r00      [10]  287 	jp	Z,00115$
                            288 ;src/main.c:79: render_draw_to_buffer();
   014C CDr00r00      [17]  289 	call	_render_draw_to_buffer
                            290 ;src/main.c:80: cpct_drawSprite(SCREEN_TEXTURE_BUFFER,SCREEN_TEXTURE_POSITION,SCREEN_TEXTURE_WIDTH_BYTES,SCREEN_TEXTURE_HEIGHT);
   014F 21 28 64      [10]  291 	ld	hl,#0x6428
   0152 E5            [11]  292 	push	hl
   0153 21 14 C0      [10]  293 	ld	hl,#0xC014
   0156 E5            [11]  294 	push	hl
   0157 21 40 2B      [10]  295 	ld	hl,#0x2B40
   015A E5            [11]  296 	push	hl
   015B CDr00r00      [17]  297 	call	_cpct_drawSprite
                            298 ;src/main.c:81: draw_minimap_to_buffer();
   015E CDr00r00      [17]  299 	call	_draw_minimap_to_buffer
                            300 ;src/main.c:82: cpct_drawSprite(MINIMAP_BUFFER,MINIMAP_POSITION,MINIMAP_WIDTH_BYTES,MINIMAP_HEIGHT_BYTES);
   0161 21 10 40      [10]  301 	ld	hl,#0x4010
   0164 E5            [11]  302 	push	hl
   0165 21 70 C5      [10]  303 	ld	hl,#0xC570
   0168 E5            [11]  304 	push	hl
   0169 21 40 1C      [10]  305 	ld	hl,#0x1C40
   016C E5            [11]  306 	push	hl
   016D CDr00r00      [17]  307 	call	_cpct_drawSprite
   0170 C3r70r00      [10]  308 	jp	00115$
                            309 	.area _CODE
                            310 	.area _INITIALIZER
                            311 	.area _CABS (ABS)
