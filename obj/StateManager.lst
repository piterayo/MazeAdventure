                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module StateManager
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _statemanager_update_state
                             12 	.globl _statemanager_render_state
                             13 	.globl _statemanager_manage_input
                             14 	.globl _statemanager_change_state
                             15 	.globl _cpct_scanKeyboard_f
                             16 	.globl _last_keyboardStatusBuffer
                             17 	.globl _inputReceived
                             18 	.globl _changeToState
                             19 	.globl _currentState
                             20 	.globl _stateArray
                             21 	.globl _statemanager_input_accepted
                             22 	.globl _statemanager_set_state
                             23 	.globl _scan_input
                             24 	.globl _statemanager_close_state
                             25 	.globl _statemanager_main_loop
                             26 ;--------------------------------------------------------
                             27 ; special function registers
                             28 ;--------------------------------------------------------
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DATA
                             33 ;--------------------------------------------------------
                             34 ; ram data
                             35 ;--------------------------------------------------------
                             36 	.area _INITIALIZED
   0000                      37 _last_keyboardStatusBuffer::
   0000                      38 	.ds 10
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DABS (ABS)
                             43 ;--------------------------------------------------------
                             44 ; global & static initialisations
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _GSINIT
                             48 	.area _GSFINAL
                             49 	.area _GSINIT
                             50 ;--------------------------------------------------------
                             51 ; Home
                             52 ;--------------------------------------------------------
                             53 	.area _HOME
                             54 	.area _HOME
                             55 ;--------------------------------------------------------
                             56 ; code
                             57 ;--------------------------------------------------------
                             58 	.area _CODE
                             59 ;src/StateManager.c:51: void statemanager_change_state(){
                             60 ;	---------------------------------
                             61 ; Function statemanager_change_state
                             62 ; ---------------------------------
   0000                      63 _statemanager_change_state::
                             64 ;src/StateManager.c:52: if(changeToState){
   0000 21r4Ar00      [10]   65 	ld	hl,#_changeToState + 0
   0003 4E            [ 7]   66 	ld	c, (hl)
   0004 3Ar4Ar00      [13]   67 	ld	a,(#_changeToState + 0)
   0007 B7            [ 4]   68 	or	a, a
   0008 C8            [11]   69 	ret	Z
                             70 ;src/StateManager.c:53: *(u8*)&currentState = changeToState-1;
   0009 21r49r00      [10]   71 	ld	hl,#_currentState+0
   000C 0D            [ 4]   72 	dec	c
   000D 71            [ 7]   73 	ld	(hl),c
                             74 ;src/StateManager.c:54: stateArray[currentState].enterState();
   000E 01r2Br00      [10]   75 	ld	bc,#_stateArray+0
   0011 21r49r00      [10]   76 	ld	hl,#_currentState + 0
   0014 5E            [ 7]   77 	ld	e, (hl)
   0015 16 00         [ 7]   78 	ld	d,#0x00
   0017 6B            [ 4]   79 	ld	l, e
   0018 62            [ 4]   80 	ld	h, d
   0019 29            [11]   81 	add	hl, hl
   001A 29            [11]   82 	add	hl, hl
   001B 19            [11]   83 	add	hl, de
   001C 29            [11]   84 	add	hl, hl
   001D 09            [11]   85 	add	hl,bc
   001E 4E            [ 7]   86 	ld	c,(hl)
   001F 23            [ 6]   87 	inc	hl
   0020 66            [ 7]   88 	ld	h,(hl)
   0021 69            [ 4]   89 	ld	l, c
   0022 CDr00r00      [17]   90 	call	___sdcc_call_hl
                             91 ;src/StateManager.c:55: *(u8*)&changeToState = 0;
   0025 21r4Ar00      [10]   92 	ld	hl,#_changeToState
   0028 36 00         [10]   93 	ld	(hl),#0x00
   002A C9            [10]   94 	ret
   002B                      95 _stateArray:
   002Br00r00                96 	.dw _state_mainmenu_enter
   002Dr00r00                97 	.dw _state_mainmenu_input
   002Fr00r00                98 	.dw _state_mainmenu_update
   0031r00r00                99 	.dw _state_mainmenu_render
   0033r00r00               100 	.dw _state_mainmenu_exit
   0035r00r00               101 	.dw _state_ingame_enter
   0037r00r00               102 	.dw _state_ingame_input
   0039r00r00               103 	.dw _state_ingame_update
   003Br00r00               104 	.dw _state_ingame_render
   003Dr00r00               105 	.dw _state_ingame_exit
   003Fr00r00               106 	.dw _state_pausemenu_enter
   0041r00r00               107 	.dw _state_pausemenu_input
   0043r00r00               108 	.dw _state_pausemenu_update
   0045r00r00               109 	.dw _state_pausemenu_render
   0047r00r00               110 	.dw _state_pausemenu_exit
   0049                     111 _currentState:
   0049 00                  112 	.db #0x00	; 0
   004A                     113 _changeToState:
   004A 00                  114 	.db #0x00	; 0
   004B                     115 _inputReceived:
   004B 00                  116 	.db #0x00	; 0
                            117 ;src/StateManager.c:59: void statemanager_input_accepted(){
                            118 ;	---------------------------------
                            119 ; Function statemanager_input_accepted
                            120 ; ---------------------------------
   004C                     121 _statemanager_input_accepted::
                            122 ;src/StateManager.c:60: *(u8*)&inputReceived=1;
   004C 21r4Br00      [10]  123 	ld	hl,#_inputReceived
   004F 36 01         [10]  124 	ld	(hl),#0x01
   0051 C9            [10]  125 	ret
                            126 ;src/StateManager.c:63: void statemanager_set_state(u8 state){
                            127 ;	---------------------------------
                            128 ; Function statemanager_set_state
                            129 ; ---------------------------------
   0052                     130 _statemanager_set_state::
                            131 ;src/StateManager.c:64: *(u8*)&changeToState = state+1;
   0052 01r4Ar00      [10]  132 	ld	bc,#_changeToState+0
   0055 21 02 00      [10]  133 	ld	hl, #2+0
   0058 39            [11]  134 	add	hl, sp
   0059 7E            [ 7]  135 	ld	a, (hl)
   005A 3C            [ 4]  136 	inc	a
   005B 02            [ 7]  137 	ld	(bc),a
   005C C9            [10]  138 	ret
                            139 ;src/StateManager.c:67: void scan_input(){
                            140 ;	---------------------------------
                            141 ; Function scan_input
                            142 ; ---------------------------------
   005D                     143 _scan_input::
   005D DD E5         [15]  144 	push	ix
   005F DD 21 00 00   [14]  145 	ld	ix,#0
   0063 DD 39         [15]  146 	add	ix,sp
   0065 F5            [11]  147 	push	af
   0066 F5            [11]  148 	push	af
                            149 ;src/StateManager.c:69: cpct_scanKeyboard_f();
   0067 CDr00r00      [17]  150 	call	_cpct_scanKeyboard_f
                            151 ;src/StateManager.c:70: while(n){
   006A DD 36 FC 0A   [19]  152 	ld	-4 (ix),#0x0A
   006E                     153 00101$:
   006E DD 7E FC      [19]  154 	ld	a,-4 (ix)
   0071 B7            [ 4]  155 	or	a, a
   0072 28 35         [12]  156 	jr	Z,00104$
                            157 ;src/StateManager.c:71: --n;
   0074 DD 35 FC      [23]  158 	dec	-4 (ix)
                            159 ;src/StateManager.c:72: t=cpct_keyboardStatusBuffer[n];
   0077 3Er00         [ 7]  160 	ld	a,#<(_cpct_keyboardStatusBuffer)
   0079 DD 86 FC      [19]  161 	add	a, -4 (ix)
   007C 4F            [ 4]  162 	ld	c,a
   007D 3Es00         [ 7]  163 	ld	a,#>(_cpct_keyboardStatusBuffer)
   007F CE 00         [ 7]  164 	adc	a, #0x00
   0081 47            [ 4]  165 	ld	b,a
   0082 0A            [ 7]  166 	ld	a,(bc)
   0083 DD 77 FD      [19]  167 	ld	-3 (ix),a
                            168 ;src/StateManager.c:73: cpct_keyboardStatusBuffer[n]=((last_keyboardStatusBuffer[n])|(~t));
   0086 3Er00         [ 7]  169 	ld	a,#<(_last_keyboardStatusBuffer)
   0088 DD 86 FC      [19]  170 	add	a, -4 (ix)
   008B 5F            [ 4]  171 	ld	e,a
   008C 3Es00         [ 7]  172 	ld	a,#>(_last_keyboardStatusBuffer)
   008E CE 00         [ 7]  173 	adc	a, #0x00
   0090 57            [ 4]  174 	ld	d,a
   0091 1A            [ 7]  175 	ld	a,(de)
   0092 DD 77 FF      [19]  176 	ld	-1 (ix),a
   0095 DD 7E FD      [19]  177 	ld	a,-3 (ix)
   0098 2F            [ 4]  178 	cpl
   0099 DD 77 FE      [19]  179 	ld	-2 (ix),a
   009C DD 7E FF      [19]  180 	ld	a,-1 (ix)
   009F DD B6 FE      [19]  181 	or	a, -2 (ix)
   00A2 02            [ 7]  182 	ld	(bc),a
                            183 ;src/StateManager.c:74: last_keyboardStatusBuffer[n]=t;
   00A3 DD 7E FD      [19]  184 	ld	a,-3 (ix)
   00A6 12            [ 7]  185 	ld	(de),a
   00A7 18 C5         [12]  186 	jr	00101$
   00A9                     187 00104$:
   00A9 DD F9         [10]  188 	ld	sp, ix
   00AB DD E1         [14]  189 	pop	ix
   00AD C9            [10]  190 	ret
                            191 ;src/StateManager.c:78: void statemanager_manage_input(){
                            192 ;	---------------------------------
                            193 ; Function statemanager_manage_input
                            194 ; ---------------------------------
   00AE                     195 _statemanager_manage_input::
                            196 ;src/StateManager.c:79: while(!inputReceived){
   00AE                     197 00101$:
   00AE 3Ar4Br00      [13]  198 	ld	a,(#_inputReceived + 0)
   00B1 B7            [ 4]  199 	or	a, a
   00B2 20 1E         [12]  200 	jr	NZ,00103$
                            201 ;src/StateManager.c:80: scan_input();
   00B4 CDr5Dr00      [17]  202 	call	_scan_input
                            203 ;src/StateManager.c:81: stateArray[currentState].inputState();
   00B7 21r49r00      [10]  204 	ld	hl,#_currentState + 0
   00BA 4E            [ 7]  205 	ld	c, (hl)
   00BB 06 00         [ 7]  206 	ld	b,#0x00
   00BD 69            [ 4]  207 	ld	l, c
   00BE 60            [ 4]  208 	ld	h, b
   00BF 29            [11]  209 	add	hl, hl
   00C0 29            [11]  210 	add	hl, hl
   00C1 09            [11]  211 	add	hl, bc
   00C2 29            [11]  212 	add	hl, hl
   00C3 11r2Br00      [10]  213 	ld	de,#_stateArray
   00C6 19            [11]  214 	add	hl,de
   00C7 23            [ 6]  215 	inc	hl
   00C8 23            [ 6]  216 	inc	hl
   00C9 4E            [ 7]  217 	ld	c,(hl)
   00CA 23            [ 6]  218 	inc	hl
   00CB 66            [ 7]  219 	ld	h,(hl)
   00CC 69            [ 4]  220 	ld	l, c
   00CD CDr00r00      [17]  221 	call	___sdcc_call_hl
   00D0 18 DC         [12]  222 	jr	00101$
   00D2                     223 00103$:
                            224 ;src/StateManager.c:83: *(u8*)&inputReceived=0;
   00D2 21r4Br00      [10]  225 	ld	hl,#_inputReceived
   00D5 36 00         [10]  226 	ld	(hl),#0x00
   00D7 C9            [10]  227 	ret
                            228 ;src/StateManager.c:86: void statemanager_render_state(){
                            229 ;	---------------------------------
                            230 ; Function statemanager_render_state
                            231 ; ---------------------------------
   00D8                     232 _statemanager_render_state::
                            233 ;src/StateManager.c:87: stateArray[currentState].renderState();
   00D8 01r2Br00      [10]  234 	ld	bc,#_stateArray+0
   00DB 21r49r00      [10]  235 	ld	hl,#_currentState + 0
   00DE 5E            [ 7]  236 	ld	e, (hl)
   00DF 16 00         [ 7]  237 	ld	d,#0x00
   00E1 6B            [ 4]  238 	ld	l, e
   00E2 62            [ 4]  239 	ld	h, d
   00E3 29            [11]  240 	add	hl, hl
   00E4 29            [11]  241 	add	hl, hl
   00E5 19            [11]  242 	add	hl, de
   00E6 29            [11]  243 	add	hl, hl
   00E7 09            [11]  244 	add	hl,bc
   00E8 11 06 00      [10]  245 	ld	de, #0x0006
   00EB 19            [11]  246 	add	hl, de
   00EC 4E            [ 7]  247 	ld	c,(hl)
   00ED 23            [ 6]  248 	inc	hl
   00EE 66            [ 7]  249 	ld	h,(hl)
   00EF 69            [ 4]  250 	ld	l, c
   00F0 C3r00r00      [10]  251 	jp  ___sdcc_call_hl
                            252 ;src/StateManager.c:90: void statemanager_close_state(u8 state){
                            253 ;	---------------------------------
                            254 ; Function statemanager_close_state
                            255 ; ---------------------------------
   00F3                     256 _statemanager_close_state::
   00F3 DD E5         [15]  257 	push	ix
   00F5 DD 21 00 00   [14]  258 	ld	ix,#0
   00F9 DD 39         [15]  259 	add	ix,sp
                            260 ;src/StateManager.c:91: stateArray[state].exitState();
   00FB 01r2Br00      [10]  261 	ld	bc,#_stateArray+0
   00FE DD 5E 04      [19]  262 	ld	e,4 (ix)
   0101 16 00         [ 7]  263 	ld	d,#0x00
   0103 6B            [ 4]  264 	ld	l, e
   0104 62            [ 4]  265 	ld	h, d
   0105 29            [11]  266 	add	hl, hl
   0106 29            [11]  267 	add	hl, hl
   0107 19            [11]  268 	add	hl, de
   0108 29            [11]  269 	add	hl, hl
   0109 09            [11]  270 	add	hl,bc
   010A 11 08 00      [10]  271 	ld	de, #0x0008
   010D 19            [11]  272 	add	hl, de
   010E 4E            [ 7]  273 	ld	c,(hl)
   010F 23            [ 6]  274 	inc	hl
   0110 66            [ 7]  275 	ld	h,(hl)
   0111 69            [ 4]  276 	ld	l, c
   0112 DD E1         [14]  277 	pop	ix
   0114 C3r00r00      [10]  278 	jp	___sdcc_call_hl
                            279 ;src/StateManager.c:94: void statemanager_update_state(){
                            280 ;	---------------------------------
                            281 ; Function statemanager_update_state
                            282 ; ---------------------------------
   0117                     283 _statemanager_update_state::
                            284 ;src/StateManager.c:95: stateArray[currentState].updateState();
   0117 01r2Br00      [10]  285 	ld	bc,#_stateArray+0
   011A 21r49r00      [10]  286 	ld	hl,#_currentState + 0
   011D 5E            [ 7]  287 	ld	e, (hl)
   011E 16 00         [ 7]  288 	ld	d,#0x00
   0120 6B            [ 4]  289 	ld	l, e
   0121 62            [ 4]  290 	ld	h, d
   0122 29            [11]  291 	add	hl, hl
   0123 29            [11]  292 	add	hl, hl
   0124 19            [11]  293 	add	hl, de
   0125 29            [11]  294 	add	hl, hl
   0126 09            [11]  295 	add	hl,bc
   0127 11 04 00      [10]  296 	ld	de, #0x0004
   012A 19            [11]  297 	add	hl, de
   012B 4E            [ 7]  298 	ld	c,(hl)
   012C 23            [ 6]  299 	inc	hl
   012D 66            [ 7]  300 	ld	h,(hl)
   012E 69            [ 4]  301 	ld	l, c
   012F C3r00r00      [10]  302 	jp  ___sdcc_call_hl
                            303 ;src/StateManager.c:98: void statemanager_main_loop(){
                            304 ;	---------------------------------
                            305 ; Function statemanager_main_loop
                            306 ; ---------------------------------
   0132                     307 _statemanager_main_loop::
                            308 ;src/StateManager.c:99: while(1) {
   0132                     309 00102$:
                            310 ;src/StateManager.c:100: statemanager_change_state();
   0132 CDr00r00      [17]  311 	call	_statemanager_change_state
                            312 ;src/StateManager.c:101: statemanager_manage_input();
   0135 CDrAEr00      [17]  313 	call	_statemanager_manage_input
                            314 ;src/StateManager.c:102: statemanager_update_state();
   0138 CDr17r01      [17]  315 	call	_statemanager_update_state
                            316 ;src/StateManager.c:103: statemanager_render_state();
   013B CDrD8r00      [17]  317 	call	_statemanager_render_state
   013E 18 F2         [12]  318 	jr	00102$
                            319 	.area _CODE
                            320 	.area _INITIALIZER
   0000                     321 __xinit__last_keyboardStatusBuffer:
   0000 FF                  322 	.db #0xFF	; 255
   0001 FF                  323 	.db #0xFF	; 255
   0002 FF                  324 	.db #0xFF	; 255
   0003 FF                  325 	.db #0xFF	; 255
   0004 FF                  326 	.db #0xFF	; 255
   0005 FF                  327 	.db #0xFF	; 255
   0006 FF                  328 	.db #0xFF	; 255
   0007 FF                  329 	.db #0xFF	; 255
   0008 FF                  330 	.db #0xFF	; 255
   0009 FF                  331 	.db #0xFF	; 255
                            332 	.area _CABS (ABS)
