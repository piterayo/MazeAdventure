                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module StateManager
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _statemanager_update_state
                             12 	.globl _statemanager_render_state
                             13 	.globl _statemanager_manage_input
                             14 	.globl _scan_input
                             15 	.globl _statemanager_change_state
                             16 	.globl _statemanager_drop_state
                             17 	.globl _cpct_waitVSYNC
                             18 	.globl _cpct_isAnyKeyPressed_f
                             19 	.globl _cpct_scanKeyboard_f
                             20 	.globl _last_keyboardStatusBuffer
                             21 	.globl _gameRunning
                             22 	.globl _inputReceived
                             23 	.globl _changeToState
                             24 	.globl _currentState
                             25 	.globl _closeState
                             26 	.globl _stateArray
                             27 	.globl _statemanager_input_accepted
                             28 	.globl _statemanager_set_state
                             29 	.globl _statemanager_close_state
                             30 	.globl _statemanager_exit_game
                             31 	.globl _statemanager_main_loop
                             32 ;--------------------------------------------------------
                             33 ; special function registers
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; ram data
                             37 ;--------------------------------------------------------
                             38 	.area _DATA
                             39 ;--------------------------------------------------------
                             40 ; ram data
                             41 ;--------------------------------------------------------
                             42 	.area _INITIALIZED
                             43 ;--------------------------------------------------------
                             44 ; absolute external ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DABS (ABS)
                             47 ;--------------------------------------------------------
                             48 ; global & static initialisations
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _GSINIT
                             52 	.area _GSFINAL
                             53 	.area _GSINIT
                             54 ;--------------------------------------------------------
                             55 ; Home
                             56 ;--------------------------------------------------------
                             57 	.area _HOME
                             58 	.area _HOME
                             59 ;--------------------------------------------------------
                             60 ; code
                             61 ;--------------------------------------------------------
                             62 	.area _CODE
                             63 ;src/StateManager.c:168: void statemanager_drop_state(){
                             64 ;	---------------------------------
                             65 ; Function statemanager_drop_state
                             66 ; ---------------------------------
   0000                      67 _statemanager_drop_state::
                             68 ;src/StateManager.c:169: if(closeState){
   0000 3ArF0r00      [13]   69 	ld	a,(#_closeState + 0)
   0003 B7            [ 4]   70 	or	a, a
   0004 C8            [11]   71 	ret	Z
                             72 ;src/StateManager.c:170: stateArray[currentState].exitState();
   0005 01r56r00      [10]   73 	ld	bc,#_stateArray+0
   0008 21rF1r00      [10]   74 	ld	hl,#_currentState + 0
   000B 5E            [ 7]   75 	ld	e, (hl)
   000C 16 00         [ 7]   76 	ld	d,#0x00
   000E 6B            [ 4]   77 	ld	l, e
   000F 62            [ 4]   78 	ld	h, d
   0010 29            [11]   79 	add	hl, hl
   0011 19            [11]   80 	add	hl, de
   0012 29            [11]   81 	add	hl, hl
   0013 19            [11]   82 	add	hl, de
   0014 29            [11]   83 	add	hl, hl
   0015 09            [11]   84 	add	hl,bc
   0016 11 0C 00      [10]   85 	ld	de, #0x000C
   0019 19            [11]   86 	add	hl, de
   001A 5E            [ 7]   87 	ld	e,(hl)
   001B 23            [ 6]   88 	inc	hl
   001C 66            [ 7]   89 	ld	h,(hl)
   001D C5            [11]   90 	push	bc
   001E 6B            [ 4]   91 	ld	l, e
   001F CDr00r00      [17]   92 	call	___sdcc_call_hl
   0022 C1            [10]   93 	pop	bc
                             94 ;src/StateManager.c:171: *(u8*)&currentState = stateArray[currentState].lastStateid;
   0023 21rF1r00      [10]   95 	ld	hl,#_currentState + 0
   0026 5E            [ 7]   96 	ld	e, (hl)
   0027 16 00         [ 7]   97 	ld	d,#0x00
   0029 6B            [ 4]   98 	ld	l, e
   002A 62            [ 4]   99 	ld	h, d
   002B 29            [11]  100 	add	hl, hl
   002C 19            [11]  101 	add	hl, de
   002D 29            [11]  102 	add	hl, hl
   002E 19            [11]  103 	add	hl, de
   002F 29            [11]  104 	add	hl, hl
   0030 09            [11]  105 	add	hl,bc
   0031 23            [ 6]  106 	inc	hl
   0032 5E            [ 7]  107 	ld	e,(hl)
   0033 21rF1r00      [10]  108 	ld	hl,#_currentState
   0036 73            [ 7]  109 	ld	(hl),e
                            110 ;src/StateManager.c:172: stateArray[currentState].returnState();
   0037 21rF1r00      [10]  111 	ld	hl,#_currentState + 0
   003A 5E            [ 7]  112 	ld	e, (hl)
   003B 16 00         [ 7]  113 	ld	d,#0x00
   003D 6B            [ 4]  114 	ld	l, e
   003E 62            [ 4]  115 	ld	h, d
   003F 29            [11]  116 	add	hl, hl
   0040 19            [11]  117 	add	hl, de
   0041 29            [11]  118 	add	hl, hl
   0042 19            [11]  119 	add	hl, de
   0043 29            [11]  120 	add	hl, hl
   0044 09            [11]  121 	add	hl,bc
   0045 11 04 00      [10]  122 	ld	de, #0x0004
   0048 19            [11]  123 	add	hl, de
   0049 7E            [ 7]  124 	ld	a, (hl)
   004A 23            [ 6]  125 	inc	hl
   004B 66            [ 7]  126 	ld	h,(hl)
   004C 6F            [ 4]  127 	ld	l,a
   004D CDr00r00      [17]  128 	call	___sdcc_call_hl
                            129 ;src/StateManager.c:173: *(u8*)&closeState=0;
   0050 21rF0r00      [10]  130 	ld	hl,#_closeState
   0053 36 00         [10]  131 	ld	(hl),#0x00
   0055 C9            [10]  132 	ret
   0056                     133 _stateArray:
   0056 00                  134 	.db #0x00	; 0
   0057 00                  135 	.db #0x00	; 0
   0058r00r00               136 	.dw _state_mainmenu_enter
   005Ar00r00               137 	.dw _state_mainmenu_return
   005Cr00r00               138 	.dw _state_mainmenu_input
   005Er00r00               139 	.dw _state_mainmenu_update
   0060r00r00               140 	.dw _state_mainmenu_render
   0062r00r00               141 	.dw _state_mainmenu_exit
   0064 01                  142 	.db #0x01	; 1
   0065 00                  143 	.db #0x00	; 0
   0066r00r00               144 	.dw _state_ingame_enter
   0068r00r00               145 	.dw _state_ingame_return
   006Ar00r00               146 	.dw _state_ingame_input
   006Cr00r00               147 	.dw _state_ingame_update
   006Er00r00               148 	.dw _state_ingame_render
   0070r00r00               149 	.dw _state_ingame_exit
   0072 02                  150 	.db #0x02	; 2
   0073 00                  151 	.db #0x00	; 0
   0074r00r00               152 	.dw _state_pausemenu_enter
   0076r00r00               153 	.dw _state_pausemenu_return
   0078r00r00               154 	.dw _state_pausemenu_input
   007Ar00r00               155 	.dw _state_pausemenu_update
   007Cr00r00               156 	.dw _state_pausemenu_render
   007Er00r00               157 	.dw _state_pausemenu_exit
   0080 03                  158 	.db #0x03	; 3
   0081 00                  159 	.db #0x00	; 0
   0082r00r00               160 	.dw _state_loadlevel_enter
   0084r00r00               161 	.dw _state_loadlevel_return
   0086r00r00               162 	.dw _state_loadlevel_input
   0088r00r00               163 	.dw _state_loadlevel_update
   008Ar00r00               164 	.dw _state_loadlevel_render
   008Cr00r00               165 	.dw _state_loadlevel_exit
   008E 04                  166 	.db #0x04	; 4
   008F 00                  167 	.db #0x00	; 0
   0090r00r00               168 	.dw _state_options_enter
   0092r00r00               169 	.dw _state_options_return
   0094r00r00               170 	.dw _state_options_input
   0096r00r00               171 	.dw _state_options_update
   0098r00r00               172 	.dw _state_options_render
   009Ar00r00               173 	.dw _state_options_exit
   009C 05                  174 	.db #0x05	; 5
   009D 00                  175 	.db #0x00	; 0
   009Er00r00               176 	.dw _state_gameover_enter
   00A0r00r00               177 	.dw _state_gameover_return
   00A2r00r00               178 	.dw _state_gameover_input
   00A4r00r00               179 	.dw _state_gameover_update
   00A6r00r00               180 	.dw _state_gameover_render
   00A8r00r00               181 	.dw _state_gameover_exit
   00AA 06                  182 	.db #0x06	; 6
   00AB 00                  183 	.db #0x00	; 0
   00ACr00r00               184 	.dw _state_credits_enter
   00AEr00r00               185 	.dw _state_credits_return
   00B0r00r00               186 	.dw _state_credits_input
   00B2r00r00               187 	.dw _state_credits_update
   00B4r00r00               188 	.dw _state_credits_render
   00B6r00r00               189 	.dw _state_credits_exit
   00B8 07                  190 	.db #0x07	; 7
   00B9 00                  191 	.db #0x00	; 0
   00BAr00r00               192 	.dw _state_victory_enter
   00BCr00r00               193 	.dw _state_victory_return
   00BEr00r00               194 	.dw _state_victory_input
   00C0r00r00               195 	.dw _state_victory_update
   00C2r00r00               196 	.dw _state_victory_render
   00C4r00r00               197 	.dw _state_victory_exit
   00C6 08                  198 	.db #0x08	; 8
   00C7 00                  199 	.db #0x00	; 0
   00C8r00r00               200 	.dw _state_inventory_enter
   00CAr00r00               201 	.dw _state_inventory_return
   00CCr00r00               202 	.dw _state_inventory_input
   00CEr00r00               203 	.dw _state_inventory_update
   00D0r00r00               204 	.dw _state_inventory_render
   00D2r00r00               205 	.dw _state_inventory_exit
   00D4 09                  206 	.db #0x09	; 9
   00D5 00                  207 	.db #0x00	; 0
   00D6r00r00               208 	.dw _state_saveexit_enter
   00D8r00r00               209 	.dw _state_saveexit_return
   00DAr00r00               210 	.dw _state_saveexit_input
   00DCr00r00               211 	.dw _state_saveexit_update
   00DEr00r00               212 	.dw _state_saveexit_render
   00E0r00r00               213 	.dw _state_saveexit_exit
   00E2 0A                  214 	.db #0x0A	; 10
   00E3 00                  215 	.db #0x00	; 0
   00E4r00r00               216 	.dw _state_loadgame_enter
   00E6r00r00               217 	.dw _state_loadgame_return
   00E8r00r00               218 	.dw _state_loadgame_input
   00EAr00r00               219 	.dw _state_loadgame_update
   00ECr00r00               220 	.dw _state_loadgame_render
   00EEr00r00               221 	.dw _state_loadgame_exit
   00F0                     222 _closeState:
   00F0 00                  223 	.db #0x00	; 0
   00F1                     224 _currentState:
   00F1 00                  225 	.db #0x00	; 0
   00F2                     226 _changeToState:
   00F2 00                  227 	.db #0x00	; 0
   00F3                     228 _inputReceived:
   00F3 00                  229 	.db #0x00	; 0
   00F4                     230 _gameRunning:
   00F4 01                  231 	.db #0x01	; 1
   00F5                     232 _last_keyboardStatusBuffer:
   00F5 FF                  233 	.db #0xFF	; 255
   00F6 FF                  234 	.db #0xFF	; 255
   00F7 FF                  235 	.db #0xFF	; 255
   00F8 FF                  236 	.db #0xFF	; 255
   00F9 FF                  237 	.db #0xFF	; 255
   00FA FF                  238 	.db #0xFF	; 255
   00FB FF                  239 	.db #0xFF	; 255
   00FC FF                  240 	.db #0xFF	; 255
   00FD FF                  241 	.db #0xFF	; 255
   00FE FF                  242 	.db #0xFF	; 255
                            243 ;src/StateManager.c:177: void statemanager_change_state(){
                            244 ;	---------------------------------
                            245 ; Function statemanager_change_state
                            246 ; ---------------------------------
   00FF                     247 _statemanager_change_state::
                            248 ;src/StateManager.c:178: if(changeToState){
   00FF 21rF2r00      [10]  249 	ld	hl,#_changeToState + 0
   0102 4E            [ 7]  250 	ld	c, (hl)
   0103 3ArF2r00      [13]  251 	ld	a,(#_changeToState + 0)
   0106 B7            [ 4]  252 	or	a, a
   0107 C8            [11]  253 	ret	Z
                            254 ;src/StateManager.c:179: *(u8*)&(stateArray[changeToState-1].lastStateid) = currentState;
   0108 11r56r00      [10]  255 	ld	de,#_stateArray+0
   010B 0D            [ 4]  256 	dec	c
   010C 06 00         [ 7]  257 	ld	b,#0x00
   010E 69            [ 4]  258 	ld	l, c
   010F 60            [ 4]  259 	ld	h, b
   0110 29            [11]  260 	add	hl, hl
   0111 09            [11]  261 	add	hl, bc
   0112 29            [11]  262 	add	hl, hl
   0113 09            [11]  263 	add	hl, bc
   0114 29            [11]  264 	add	hl, hl
   0115 19            [11]  265 	add	hl,de
   0116 23            [ 6]  266 	inc	hl
   0117 FD 21rF1r00   [14]  267 	ld	iy,#_currentState
   011B FD 4E 00      [19]  268 	ld	c,0 (iy)
   011E 71            [ 7]  269 	ld	(hl),c
                            270 ;src/StateManager.c:180: *(u8*)&currentState = changeToState-1;
   011F 21rF1r00      [10]  271 	ld	hl,#_currentState+0
   0122 FD 21rF2r00   [14]  272 	ld	iy,#_changeToState
   0126 FD 4E 00      [19]  273 	ld	c,0 (iy)
   0129 0D            [ 4]  274 	dec	c
   012A 71            [ 7]  275 	ld	(hl),c
                            276 ;src/StateManager.c:181: stateArray[currentState].enterState();
   012B 21rF1r00      [10]  277 	ld	hl,#_currentState + 0
   012E 4E            [ 7]  278 	ld	c, (hl)
   012F 06 00         [ 7]  279 	ld	b,#0x00
   0131 69            [ 4]  280 	ld	l, c
   0132 60            [ 4]  281 	ld	h, b
   0133 29            [11]  282 	add	hl, hl
   0134 09            [11]  283 	add	hl, bc
   0135 29            [11]  284 	add	hl, hl
   0136 09            [11]  285 	add	hl, bc
   0137 29            [11]  286 	add	hl, hl
   0138 19            [11]  287 	add	hl,de
   0139 23            [ 6]  288 	inc	hl
   013A 23            [ 6]  289 	inc	hl
   013B 4E            [ 7]  290 	ld	c,(hl)
   013C 23            [ 6]  291 	inc	hl
   013D 66            [ 7]  292 	ld	h,(hl)
   013E 69            [ 4]  293 	ld	l, c
   013F CDr00r00      [17]  294 	call	___sdcc_call_hl
                            295 ;src/StateManager.c:182: *(u8*)&changeToState = 0;
   0142 21rF2r00      [10]  296 	ld	hl,#_changeToState
   0145 36 00         [10]  297 	ld	(hl),#0x00
   0147 C9            [10]  298 	ret
                            299 ;src/StateManager.c:186: void statemanager_input_accepted(){
                            300 ;	---------------------------------
                            301 ; Function statemanager_input_accepted
                            302 ; ---------------------------------
   0148                     303 _statemanager_input_accepted::
                            304 ;src/StateManager.c:187: *(u8*)&inputReceived=1;
   0148 21rF3r00      [10]  305 	ld	hl,#_inputReceived
   014B 36 01         [10]  306 	ld	(hl),#0x01
   014D C9            [10]  307 	ret
                            308 ;src/StateManager.c:190: void statemanager_set_state(u8 state) {
                            309 ;	---------------------------------
                            310 ; Function statemanager_set_state
                            311 ; ---------------------------------
   014E                     312 _statemanager_set_state::
                            313 ;src/StateManager.c:191: *(u8*)&changeToState = state+1;
   014E 01rF2r00      [10]  314 	ld	bc,#_changeToState+0
   0151 21 02 00      [10]  315 	ld	hl, #2+0
   0154 39            [11]  316 	add	hl, sp
   0155 7E            [ 7]  317 	ld	a, (hl)
   0156 3C            [ 4]  318 	inc	a
   0157 02            [ 7]  319 	ld	(bc),a
   0158 C9            [10]  320 	ret
                            321 ;src/StateManager.c:194: void scan_input(){
                            322 ;	---------------------------------
                            323 ; Function scan_input
                            324 ; ---------------------------------
   0159                     325 _scan_input::
   0159 DD E5         [15]  326 	push	ix
   015B DD 21 00 00   [14]  327 	ld	ix,#0
   015F DD 39         [15]  328 	add	ix,sp
   0161 F5            [11]  329 	push	af
                            330 ;src/StateManager.c:196: u8* currentStatus=(cpct_keyboardStatusBuffer+n);
                            331 ;src/StateManager.c:197: u8* lastStatus=(((u8*)last_keyboardStatusBuffer)+n);
                            332 ;src/StateManager.c:199: cpct_scanKeyboard_f();
   0162 CDr00r00      [17]  333 	call	_cpct_scanKeyboard_f
                            334 ;src/StateManager.c:200: while(n){
   0165 1E 0A         [ 7]  335 	ld	e,#0x0A
   0167 01r0Ar00      [10]  336 	ld	bc,#(_cpct_keyboardStatusBuffer + 0x000a)
   016A FD 21rFFr00   [14]  337 	ld	iy,#(_last_keyboardStatusBuffer + 0x000a)
   016E                     338 00101$:
   016E 7B            [ 4]  339 	ld	a,e
   016F B7            [ 4]  340 	or	a, a
   0170 28 1D         [12]  341 	jr	Z,00103$
                            342 ;src/StateManager.c:201: --n;
   0172 1D            [ 4]  343 	dec	e
                            344 ;src/StateManager.c:202: --currentStatus;
   0173 0B            [ 6]  345 	dec	bc
                            346 ;src/StateManager.c:203: --lastStatus;
   0174 FD 2B         [10]  347 	dec	iy
                            348 ;src/StateManager.c:205: t=*(currentStatus);
   0176 0A            [ 7]  349 	ld	a,(bc)
   0177 57            [ 4]  350 	ld	d,a
                            351 ;src/StateManager.c:206: *currentStatus=((*lastStatus)|(~t));
   0178 FD 7E 00      [19]  352 	ld	a, 0 (iy)
   017B DD 77 FF      [19]  353 	ld	-1 (ix),a
   017E 7A            [ 4]  354 	ld	a,d
   017F 2F            [ 4]  355 	cpl
   0180 DD 77 FE      [19]  356 	ld	-2 (ix),a
   0183 DD 7E FF      [19]  357 	ld	a,-1 (ix)
   0186 DD B6 FE      [19]  358 	or	a, -2 (ix)
   0189 02            [ 7]  359 	ld	(bc),a
                            360 ;src/StateManager.c:207: *lastStatus=t;
   018A FD 72 00      [19]  361 	ld	0 (iy), d
   018D 18 DF         [12]  362 	jr	00101$
   018F                     363 00103$:
                            364 ;src/StateManager.c:211: if(cpct_isAnyKeyPressed_f()) ++r_counter;
   018F CDr00r00      [17]  365 	call	_cpct_isAnyKeyPressed_f
   0192 7D            [ 4]  366 	ld	a,l
   0193 B7            [ 4]  367 	or	a, a
   0194 28 0A         [12]  368 	jr	Z,00106$
   0196 21r00r00      [10]  369 	ld	hl, #_r_counter+0
   0199 34            [11]  370 	inc	(hl)
   019A 20 04         [12]  371 	jr	NZ,00121$
   019C 21r01r00      [10]  372 	ld	hl, #_r_counter+1
   019F 34            [11]  373 	inc	(hl)
   01A0                     374 00121$:
   01A0                     375 00106$:
   01A0 DD F9         [10]  376 	ld	sp, ix
   01A2 DD E1         [14]  377 	pop	ix
   01A4 C9            [10]  378 	ret
                            379 ;src/StateManager.c:214: void statemanager_manage_input(){
                            380 ;	---------------------------------
                            381 ; Function statemanager_manage_input
                            382 ; ---------------------------------
   01A5                     383 _statemanager_manage_input::
                            384 ;src/StateManager.c:215: while(!inputReceived){
   01A5                     385 00101$:
   01A5 3ArF3r00      [13]  386 	ld	a,(#_inputReceived + 0)
   01A8 B7            [ 4]  387 	or	a, a
   01A9 20 21         [12]  388 	jr	NZ,00103$
                            389 ;src/StateManager.c:216: scan_input();
   01AB CDr59r01      [17]  390 	call	_scan_input
                            391 ;src/StateManager.c:217: stateArray[currentState].inputState();
   01AE 21rF1r00      [10]  392 	ld	hl,#_currentState + 0
   01B1 4E            [ 7]  393 	ld	c, (hl)
   01B2 06 00         [ 7]  394 	ld	b,#0x00
   01B4 69            [ 4]  395 	ld	l, c
   01B5 60            [ 4]  396 	ld	h, b
   01B6 29            [11]  397 	add	hl, hl
   01B7 09            [11]  398 	add	hl, bc
   01B8 29            [11]  399 	add	hl, hl
   01B9 09            [11]  400 	add	hl, bc
   01BA 29            [11]  401 	add	hl, hl
   01BB 11r56r00      [10]  402 	ld	de,#_stateArray
   01BE 19            [11]  403 	add	hl,de
   01BF 11 06 00      [10]  404 	ld	de, #0x0006
   01C2 19            [11]  405 	add	hl, de
   01C3 4E            [ 7]  406 	ld	c,(hl)
   01C4 23            [ 6]  407 	inc	hl
   01C5 66            [ 7]  408 	ld	h,(hl)
   01C6 69            [ 4]  409 	ld	l, c
   01C7 CDr00r00      [17]  410 	call	___sdcc_call_hl
   01CA 18 D9         [12]  411 	jr	00101$
   01CC                     412 00103$:
                            413 ;src/StateManager.c:219: *(u8*)&inputReceived=0;
   01CC 21rF3r00      [10]  414 	ld	hl,#_inputReceived
   01CF 36 00         [10]  415 	ld	(hl),#0x00
   01D1 C9            [10]  416 	ret
                            417 ;src/StateManager.c:222: void statemanager_render_state(){
                            418 ;	---------------------------------
                            419 ; Function statemanager_render_state
                            420 ; ---------------------------------
   01D2                     421 _statemanager_render_state::
                            422 ;src/StateManager.c:223: cpct_waitVSYNC();
   01D2 CDr00r00      [17]  423 	call	_cpct_waitVSYNC
                            424 ;src/StateManager.c:224: stateArray[currentState].renderState();
   01D5 01r56r00      [10]  425 	ld	bc,#_stateArray+0
   01D8 21rF1r00      [10]  426 	ld	hl,#_currentState + 0
   01DB 5E            [ 7]  427 	ld	e, (hl)
   01DC 16 00         [ 7]  428 	ld	d,#0x00
   01DE 6B            [ 4]  429 	ld	l, e
   01DF 62            [ 4]  430 	ld	h, d
   01E0 29            [11]  431 	add	hl, hl
   01E1 19            [11]  432 	add	hl, de
   01E2 29            [11]  433 	add	hl, hl
   01E3 19            [11]  434 	add	hl, de
   01E4 29            [11]  435 	add	hl, hl
   01E5 09            [11]  436 	add	hl,bc
   01E6 11 0A 00      [10]  437 	ld	de, #0x000A
   01E9 19            [11]  438 	add	hl, de
   01EA 4E            [ 7]  439 	ld	c,(hl)
   01EB 23            [ 6]  440 	inc	hl
   01EC 66            [ 7]  441 	ld	h,(hl)
   01ED 69            [ 4]  442 	ld	l, c
   01EE C3r00r00      [10]  443 	jp  ___sdcc_call_hl
                            444 ;src/StateManager.c:227: void statemanager_close_state(){
                            445 ;	---------------------------------
                            446 ; Function statemanager_close_state
                            447 ; ---------------------------------
   01F1                     448 _statemanager_close_state::
                            449 ;src/StateManager.c:228: *(u8*)&closeState=1;
   01F1 21rF0r00      [10]  450 	ld	hl,#_closeState
   01F4 36 01         [10]  451 	ld	(hl),#0x01
   01F6 C9            [10]  452 	ret
                            453 ;src/StateManager.c:231: void statemanager_update_state(){
                            454 ;	---------------------------------
                            455 ; Function statemanager_update_state
                            456 ; ---------------------------------
   01F7                     457 _statemanager_update_state::
                            458 ;src/StateManager.c:232: stateArray[currentState].updateState();
   01F7 01r56r00      [10]  459 	ld	bc,#_stateArray+0
   01FA 21rF1r00      [10]  460 	ld	hl,#_currentState + 0
   01FD 5E            [ 7]  461 	ld	e, (hl)
   01FE 16 00         [ 7]  462 	ld	d,#0x00
   0200 6B            [ 4]  463 	ld	l, e
   0201 62            [ 4]  464 	ld	h, d
   0202 29            [11]  465 	add	hl, hl
   0203 19            [11]  466 	add	hl, de
   0204 29            [11]  467 	add	hl, hl
   0205 19            [11]  468 	add	hl, de
   0206 29            [11]  469 	add	hl, hl
   0207 09            [11]  470 	add	hl,bc
   0208 11 08 00      [10]  471 	ld	de, #0x0008
   020B 19            [11]  472 	add	hl, de
   020C 4E            [ 7]  473 	ld	c,(hl)
   020D 23            [ 6]  474 	inc	hl
   020E 66            [ 7]  475 	ld	h,(hl)
   020F 69            [ 4]  476 	ld	l, c
   0210 C3r00r00      [10]  477 	jp  ___sdcc_call_hl
                            478 ;src/StateManager.c:235: void statemanager_exit_game(){
                            479 ;	---------------------------------
                            480 ; Function statemanager_exit_game
                            481 ; ---------------------------------
   0213                     482 _statemanager_exit_game::
                            483 ;src/StateManager.c:236: *(u8*)&gameRunning=0;
   0213 21rF4r00      [10]  484 	ld	hl,#_gameRunning
   0216 36 00         [10]  485 	ld	(hl),#0x00
   0218 C9            [10]  486 	ret
                            487 ;src/StateManager.c:239: void statemanager_main_loop(){
                            488 ;	---------------------------------
                            489 ; Function statemanager_main_loop
                            490 ; ---------------------------------
   0219                     491 _statemanager_main_loop::
                            492 ;src/StateManager.c:240: while(gameRunning) {
   0219                     493 00101$:
   0219 3ArF4r00      [13]  494 	ld	a,(#_gameRunning + 0)
   021C B7            [ 4]  495 	or	a, a
   021D C8            [11]  496 	ret	Z
                            497 ;src/StateManager.c:241: statemanager_drop_state();
   021E CDr00r00      [17]  498 	call	_statemanager_drop_state
                            499 ;src/StateManager.c:242: statemanager_change_state();
   0221 CDrFFr00      [17]  500 	call	_statemanager_change_state
                            501 ;src/StateManager.c:243: statemanager_manage_input();
   0224 CDrA5r01      [17]  502 	call	_statemanager_manage_input
                            503 ;src/StateManager.c:244: statemanager_update_state();
   0227 CDrF7r01      [17]  504 	call	_statemanager_update_state
                            505 ;src/StateManager.c:245: statemanager_render_state();
   022A CDrD2r01      [17]  506 	call	_statemanager_render_state
   022D 18 EA         [12]  507 	jr	00101$
                            508 	.area _CODE
                            509 	.area _INITIALIZER
                            510 	.area _CABS (ABS)
