                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module StateManager
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _statemanager_update_state
                             12 	.globl _statemanager_render_state
                             13 	.globl _statemanager_manage_input
                             14 	.globl _scan_input
                             15 	.globl _statemanager_change_state
                             16 	.globl _statemanager_drop_state
                             17 	.globl _cpct_waitVSYNC
                             18 	.globl _cpct_scanKeyboard_f
                             19 	.globl _last_keyboardStatusBuffer
                             20 	.globl _gameRunning
                             21 	.globl _inputReceived
                             22 	.globl _changeToState
                             23 	.globl _currentState
                             24 	.globl _closeState
                             25 	.globl _stateArray
                             26 	.globl _statemanager_input_accepted
                             27 	.globl _statemanager_set_state
                             28 	.globl _statemanager_close_state
                             29 	.globl _statemanager_exit_game
                             30 	.globl _statemanager_main_loop
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DATA
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _INITIALIZED
                             42 ;--------------------------------------------------------
                             43 ; absolute external ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DABS (ABS)
                             46 ;--------------------------------------------------------
                             47 ; global & static initialisations
                             48 ;--------------------------------------------------------
                             49 	.area _HOME
                             50 	.area _GSINIT
                             51 	.area _GSFINAL
                             52 	.area _GSINIT
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE
                             62 ;src/StateManager.c:96: void statemanager_drop_state(){
                             63 ;	---------------------------------
                             64 ; Function statemanager_drop_state
                             65 ; ---------------------------------
   0000                      66 _statemanager_drop_state::
                             67 ;src/StateManager.c:97: if(closeState){
   0000 3Ar8Er00      [13]   68 	ld	a,(#_closeState + 0)
   0003 B7            [ 4]   69 	or	a, a
   0004 C8            [11]   70 	ret	Z
                             71 ;src/StateManager.c:98: stateArray[currentState].exitState();
   0005 01r56r00      [10]   72 	ld	bc,#_stateArray+0
   0008 21r8Fr00      [10]   73 	ld	hl,#_currentState + 0
   000B 5E            [ 7]   74 	ld	e, (hl)
   000C 16 00         [ 7]   75 	ld	d,#0x00
   000E 6B            [ 4]   76 	ld	l, e
   000F 62            [ 4]   77 	ld	h, d
   0010 29            [11]   78 	add	hl, hl
   0011 19            [11]   79 	add	hl, de
   0012 29            [11]   80 	add	hl, hl
   0013 19            [11]   81 	add	hl, de
   0014 29            [11]   82 	add	hl, hl
   0015 09            [11]   83 	add	hl,bc
   0016 11 0C 00      [10]   84 	ld	de, #0x000C
   0019 19            [11]   85 	add	hl, de
   001A 5E            [ 7]   86 	ld	e,(hl)
   001B 23            [ 6]   87 	inc	hl
   001C 66            [ 7]   88 	ld	h,(hl)
   001D C5            [11]   89 	push	bc
   001E 6B            [ 4]   90 	ld	l, e
   001F CDr00r00      [17]   91 	call	___sdcc_call_hl
   0022 C1            [10]   92 	pop	bc
                             93 ;src/StateManager.c:99: *(u8*)&currentState = stateArray[currentState].lastStateid;
   0023 21r8Fr00      [10]   94 	ld	hl,#_currentState + 0
   0026 5E            [ 7]   95 	ld	e, (hl)
   0027 16 00         [ 7]   96 	ld	d,#0x00
   0029 6B            [ 4]   97 	ld	l, e
   002A 62            [ 4]   98 	ld	h, d
   002B 29            [11]   99 	add	hl, hl
   002C 19            [11]  100 	add	hl, de
   002D 29            [11]  101 	add	hl, hl
   002E 19            [11]  102 	add	hl, de
   002F 29            [11]  103 	add	hl, hl
   0030 09            [11]  104 	add	hl,bc
   0031 23            [ 6]  105 	inc	hl
   0032 5E            [ 7]  106 	ld	e,(hl)
   0033 21r8Fr00      [10]  107 	ld	hl,#_currentState
   0036 73            [ 7]  108 	ld	(hl),e
                            109 ;src/StateManager.c:100: stateArray[currentState].returnState();
   0037 21r8Fr00      [10]  110 	ld	hl,#_currentState + 0
   003A 5E            [ 7]  111 	ld	e, (hl)
   003B 16 00         [ 7]  112 	ld	d,#0x00
   003D 6B            [ 4]  113 	ld	l, e
   003E 62            [ 4]  114 	ld	h, d
   003F 29            [11]  115 	add	hl, hl
   0040 19            [11]  116 	add	hl, de
   0041 29            [11]  117 	add	hl, hl
   0042 19            [11]  118 	add	hl, de
   0043 29            [11]  119 	add	hl, hl
   0044 09            [11]  120 	add	hl,bc
   0045 11 04 00      [10]  121 	ld	de, #0x0004
   0048 19            [11]  122 	add	hl, de
   0049 7E            [ 7]  123 	ld	a, (hl)
   004A 23            [ 6]  124 	inc	hl
   004B 66            [ 7]  125 	ld	h,(hl)
   004C 6F            [ 4]  126 	ld	l,a
   004D CDr00r00      [17]  127 	call	___sdcc_call_hl
                            128 ;src/StateManager.c:101: *(u8*)&closeState=0;
   0050 21r8Er00      [10]  129 	ld	hl,#_closeState
   0053 36 00         [10]  130 	ld	(hl),#0x00
   0055 C9            [10]  131 	ret
   0056                     132 _stateArray:
   0056 00                  133 	.db #0x00	; 0
   0057 00                  134 	.db #0x00	; 0
   0058r00r00               135 	.dw _state_mainmenu_enter
   005Ar00r00               136 	.dw _state_mainmenu_return
   005Cr00r00               137 	.dw _state_mainmenu_input
   005Er00r00               138 	.dw _state_mainmenu_update
   0060r00r00               139 	.dw _state_mainmenu_render
   0062r00r00               140 	.dw _state_mainmenu_exit
   0064 01                  141 	.db #0x01	; 1
   0065 00                  142 	.db #0x00	; 0
   0066r00r00               143 	.dw _state_ingame_enter
   0068r00r00               144 	.dw _state_ingame_return
   006Ar00r00               145 	.dw _state_ingame_input
   006Cr00r00               146 	.dw _state_ingame_update
   006Er00r00               147 	.dw _state_ingame_render
   0070r00r00               148 	.dw _state_ingame_exit
   0072 02                  149 	.db #0x02	; 2
   0073 00                  150 	.db #0x00	; 0
   0074r00r00               151 	.dw _state_pausemenu_enter
   0076r00r00               152 	.dw _state_pausemenu_return
   0078r00r00               153 	.dw _state_pausemenu_input
   007Ar00r00               154 	.dw _state_pausemenu_update
   007Cr00r00               155 	.dw _state_pausemenu_render
   007Er00r00               156 	.dw _state_pausemenu_exit
   0080 03                  157 	.db #0x03	; 3
   0081 00                  158 	.db #0x00	; 0
   0082r00r00               159 	.dw _state_loadlevel_enter
   0084r00r00               160 	.dw _state_loadlevel_return
   0086r00r00               161 	.dw _state_loadlevel_input
   0088r00r00               162 	.dw _state_loadlevel_update
   008Ar00r00               163 	.dw _state_loadlevel_render
   008Cr00r00               164 	.dw _state_loadlevel_exit
   008E                     165 _closeState:
   008E 00                  166 	.db #0x00	; 0
   008F                     167 _currentState:
   008F 00                  168 	.db #0x00	; 0
   0090                     169 _changeToState:
   0090 00                  170 	.db #0x00	; 0
   0091                     171 _inputReceived:
   0091 00                  172 	.db #0x00	; 0
   0092                     173 _gameRunning:
   0092 01                  174 	.db #0x01	; 1
   0093                     175 _last_keyboardStatusBuffer:
   0093 FF                  176 	.db #0xFF	; 255
   0094 FF                  177 	.db #0xFF	; 255
   0095 FF                  178 	.db #0xFF	; 255
   0096 FF                  179 	.db #0xFF	; 255
   0097 FF                  180 	.db #0xFF	; 255
   0098 FF                  181 	.db #0xFF	; 255
   0099 FF                  182 	.db #0xFF	; 255
   009A FF                  183 	.db #0xFF	; 255
   009B FF                  184 	.db #0xFF	; 255
   009C FF                  185 	.db #0xFF	; 255
                            186 ;src/StateManager.c:105: void statemanager_change_state(){
                            187 ;	---------------------------------
                            188 ; Function statemanager_change_state
                            189 ; ---------------------------------
   009D                     190 _statemanager_change_state::
                            191 ;src/StateManager.c:106: if(changeToState){
   009D 21r90r00      [10]  192 	ld	hl,#_changeToState + 0
   00A0 4E            [ 7]  193 	ld	c, (hl)
   00A1 3Ar90r00      [13]  194 	ld	a,(#_changeToState + 0)
   00A4 B7            [ 4]  195 	or	a, a
   00A5 C8            [11]  196 	ret	Z
                            197 ;src/StateManager.c:107: *(u8*)&(stateArray[changeToState-1].lastStateid) = currentState;
   00A6 11r56r00      [10]  198 	ld	de,#_stateArray+0
   00A9 0D            [ 4]  199 	dec	c
   00AA 06 00         [ 7]  200 	ld	b,#0x00
   00AC 69            [ 4]  201 	ld	l, c
   00AD 60            [ 4]  202 	ld	h, b
   00AE 29            [11]  203 	add	hl, hl
   00AF 09            [11]  204 	add	hl, bc
   00B0 29            [11]  205 	add	hl, hl
   00B1 09            [11]  206 	add	hl, bc
   00B2 29            [11]  207 	add	hl, hl
   00B3 19            [11]  208 	add	hl,de
   00B4 23            [ 6]  209 	inc	hl
   00B5 FD 21r8Fr00   [14]  210 	ld	iy,#_currentState
   00B9 FD 4E 00      [19]  211 	ld	c,0 (iy)
   00BC 71            [ 7]  212 	ld	(hl),c
                            213 ;src/StateManager.c:108: *(u8*)&currentState = changeToState-1;
   00BD 21r8Fr00      [10]  214 	ld	hl,#_currentState+0
   00C0 FD 21r90r00   [14]  215 	ld	iy,#_changeToState
   00C4 FD 4E 00      [19]  216 	ld	c,0 (iy)
   00C7 0D            [ 4]  217 	dec	c
   00C8 71            [ 7]  218 	ld	(hl),c
                            219 ;src/StateManager.c:109: stateArray[currentState].enterState();
   00C9 21r8Fr00      [10]  220 	ld	hl,#_currentState + 0
   00CC 4E            [ 7]  221 	ld	c, (hl)
   00CD 06 00         [ 7]  222 	ld	b,#0x00
   00CF 69            [ 4]  223 	ld	l, c
   00D0 60            [ 4]  224 	ld	h, b
   00D1 29            [11]  225 	add	hl, hl
   00D2 09            [11]  226 	add	hl, bc
   00D3 29            [11]  227 	add	hl, hl
   00D4 09            [11]  228 	add	hl, bc
   00D5 29            [11]  229 	add	hl, hl
   00D6 19            [11]  230 	add	hl,de
   00D7 23            [ 6]  231 	inc	hl
   00D8 23            [ 6]  232 	inc	hl
   00D9 4E            [ 7]  233 	ld	c,(hl)
   00DA 23            [ 6]  234 	inc	hl
   00DB 66            [ 7]  235 	ld	h,(hl)
   00DC 69            [ 4]  236 	ld	l, c
   00DD CDr00r00      [17]  237 	call	___sdcc_call_hl
                            238 ;src/StateManager.c:110: *(u8*)&changeToState = 0;
   00E0 21r90r00      [10]  239 	ld	hl,#_changeToState
   00E3 36 00         [10]  240 	ld	(hl),#0x00
   00E5 C9            [10]  241 	ret
                            242 ;src/StateManager.c:114: void statemanager_input_accepted(){
                            243 ;	---------------------------------
                            244 ; Function statemanager_input_accepted
                            245 ; ---------------------------------
   00E6                     246 _statemanager_input_accepted::
                            247 ;src/StateManager.c:115: *(u8*)&inputReceived=1;
   00E6 21r91r00      [10]  248 	ld	hl,#_inputReceived
   00E9 36 01         [10]  249 	ld	(hl),#0x01
   00EB C9            [10]  250 	ret
                            251 ;src/StateManager.c:118: void statemanager_set_state(u8 state) __z88dk_fastcall{
                            252 ;	---------------------------------
                            253 ; Function statemanager_set_state
                            254 ; ---------------------------------
   00EC                     255 _statemanager_set_state::
                            256 ;src/StateManager.c:119: *(u8*)&changeToState = state+1;
   00EC 01r90r00      [10]  257 	ld	bc,#_changeToState+0
   00EF 7D            [ 4]  258 	ld	a,l
   00F0 3C            [ 4]  259 	inc	a
   00F1 02            [ 7]  260 	ld	(bc),a
   00F2 C9            [10]  261 	ret
                            262 ;src/StateManager.c:122: void scan_input(){
                            263 ;	---------------------------------
                            264 ; Function scan_input
                            265 ; ---------------------------------
   00F3                     266 _scan_input::
   00F3 DD E5         [15]  267 	push	ix
   00F5 DD 21 00 00   [14]  268 	ld	ix,#0
   00F9 DD 39         [15]  269 	add	ix,sp
   00FB F5            [11]  270 	push	af
   00FC 3B            [ 6]  271 	dec	sp
                            272 ;src/StateManager.c:123: u8 t,n=10, anyKeyPressed=0xFF;
   00FD DD 36 FD FF   [19]  273 	ld	-3 (ix),#0xFF
                            274 ;src/StateManager.c:124: u8* currentStatus=(cpct_keyboardStatusBuffer+n);
                            275 ;src/StateManager.c:125: u8* lastStatus=(((u8*)last_keyboardStatusBuffer)+n);
                            276 ;src/StateManager.c:127: cpct_scanKeyboard_f();
   0101 CDr00r00      [17]  277 	call	_cpct_scanKeyboard_f
                            278 ;src/StateManager.c:128: while(n){
   0104 1E 0A         [ 7]  279 	ld	e,#0x0A
   0106 01r0Ar00      [10]  280 	ld	bc,#(_cpct_keyboardStatusBuffer + 0x000a)
   0109 FD 21r9Dr00   [14]  281 	ld	iy,#(_last_keyboardStatusBuffer + 0x000a)
   010D                     282 00101$:
   010D 7B            [ 4]  283 	ld	a,e
   010E B7            [ 4]  284 	or	a, a
   010F 28 24         [12]  285 	jr	Z,00103$
                            286 ;src/StateManager.c:129: --n;
   0111 1D            [ 4]  287 	dec	e
                            288 ;src/StateManager.c:130: --currentStatus;
   0112 0B            [ 6]  289 	dec	bc
                            290 ;src/StateManager.c:131: --lastStatus;
   0113 FD 2B         [10]  291 	dec	iy
                            292 ;src/StateManager.c:133: t=*(currentStatus);
   0115 0A            [ 7]  293 	ld	a,(bc)
   0116 57            [ 4]  294 	ld	d,a
                            295 ;src/StateManager.c:134: anyKeyPressed&=t;
   0117 DD 7E FD      [19]  296 	ld	a,-3 (ix)
   011A A2            [ 4]  297 	and	a, d
   011B DD 77 FD      [19]  298 	ld	-3 (ix),a
                            299 ;src/StateManager.c:135: *currentStatus=((*lastStatus)|(~t));
   011E FD 7E 00      [19]  300 	ld	a, 0 (iy)
   0121 DD 77 FF      [19]  301 	ld	-1 (ix),a
   0124 7A            [ 4]  302 	ld	a,d
   0125 2F            [ 4]  303 	cpl
   0126 DD 77 FE      [19]  304 	ld	-2 (ix),a
   0129 DD 7E FF      [19]  305 	ld	a,-1 (ix)
   012C DD B6 FE      [19]  306 	or	a, -2 (ix)
   012F 02            [ 7]  307 	ld	(bc),a
                            308 ;src/StateManager.c:136: *lastStatus=t;
   0130 FD 72 00      [19]  309 	ld	0 (iy), d
   0133 18 D8         [12]  310 	jr	00101$
   0135                     311 00103$:
                            312 ;src/StateManager.c:140: if(~anyKeyPressed) ++r_counter;
   0135 DD 7E FD      [19]  313 	ld	a, -3 (ix)
   0138 06 00         [ 7]  314 	ld	b, #0x00
   013A 2F            [ 4]  315 	cpl
   013B 4F            [ 4]  316 	ld	c,a
   013C 78            [ 4]  317 	ld	a,b
   013D 2F            [ 4]  318 	cpl
   013E B1            [ 4]  319 	or	a,c
   013F 28 0A         [12]  320 	jr	Z,00106$
   0141 21r00r00      [10]  321 	ld	hl, #_r_counter+0
   0144 34            [11]  322 	inc	(hl)
   0145 20 04         [12]  323 	jr	NZ,00121$
   0147 21r01r00      [10]  324 	ld	hl, #_r_counter+1
   014A 34            [11]  325 	inc	(hl)
   014B                     326 00121$:
   014B                     327 00106$:
   014B DD F9         [10]  328 	ld	sp, ix
   014D DD E1         [14]  329 	pop	ix
   014F C9            [10]  330 	ret
                            331 ;src/StateManager.c:143: void statemanager_manage_input(){
                            332 ;	---------------------------------
                            333 ; Function statemanager_manage_input
                            334 ; ---------------------------------
   0150                     335 _statemanager_manage_input::
                            336 ;src/StateManager.c:144: while(!inputReceived){
   0150                     337 00101$:
   0150 3Ar91r00      [13]  338 	ld	a,(#_inputReceived + 0)
   0153 B7            [ 4]  339 	or	a, a
   0154 20 21         [12]  340 	jr	NZ,00103$
                            341 ;src/StateManager.c:145: scan_input();
   0156 CDrF3r00      [17]  342 	call	_scan_input
                            343 ;src/StateManager.c:146: stateArray[currentState].inputState();
   0159 21r8Fr00      [10]  344 	ld	hl,#_currentState + 0
   015C 4E            [ 7]  345 	ld	c, (hl)
   015D 06 00         [ 7]  346 	ld	b,#0x00
   015F 69            [ 4]  347 	ld	l, c
   0160 60            [ 4]  348 	ld	h, b
   0161 29            [11]  349 	add	hl, hl
   0162 09            [11]  350 	add	hl, bc
   0163 29            [11]  351 	add	hl, hl
   0164 09            [11]  352 	add	hl, bc
   0165 29            [11]  353 	add	hl, hl
   0166 11r56r00      [10]  354 	ld	de,#_stateArray
   0169 19            [11]  355 	add	hl,de
   016A 11 06 00      [10]  356 	ld	de, #0x0006
   016D 19            [11]  357 	add	hl, de
   016E 4E            [ 7]  358 	ld	c,(hl)
   016F 23            [ 6]  359 	inc	hl
   0170 66            [ 7]  360 	ld	h,(hl)
   0171 69            [ 4]  361 	ld	l, c
   0172 CDr00r00      [17]  362 	call	___sdcc_call_hl
   0175 18 D9         [12]  363 	jr	00101$
   0177                     364 00103$:
                            365 ;src/StateManager.c:148: *(u8*)&inputReceived=0;
   0177 21r91r00      [10]  366 	ld	hl,#_inputReceived
   017A 36 00         [10]  367 	ld	(hl),#0x00
   017C C9            [10]  368 	ret
                            369 ;src/StateManager.c:151: void statemanager_render_state(){
                            370 ;	---------------------------------
                            371 ; Function statemanager_render_state
                            372 ; ---------------------------------
   017D                     373 _statemanager_render_state::
                            374 ;src/StateManager.c:152: cpct_waitVSYNC();
   017D CDr00r00      [17]  375 	call	_cpct_waitVSYNC
                            376 ;src/StateManager.c:153: stateArray[currentState].renderState();
   0180 01r56r00      [10]  377 	ld	bc,#_stateArray+0
   0183 21r8Fr00      [10]  378 	ld	hl,#_currentState + 0
   0186 5E            [ 7]  379 	ld	e, (hl)
   0187 16 00         [ 7]  380 	ld	d,#0x00
   0189 6B            [ 4]  381 	ld	l, e
   018A 62            [ 4]  382 	ld	h, d
   018B 29            [11]  383 	add	hl, hl
   018C 19            [11]  384 	add	hl, de
   018D 29            [11]  385 	add	hl, hl
   018E 19            [11]  386 	add	hl, de
   018F 29            [11]  387 	add	hl, hl
   0190 09            [11]  388 	add	hl,bc
   0191 11 0A 00      [10]  389 	ld	de, #0x000A
   0194 19            [11]  390 	add	hl, de
   0195 4E            [ 7]  391 	ld	c,(hl)
   0196 23            [ 6]  392 	inc	hl
   0197 66            [ 7]  393 	ld	h,(hl)
   0198 69            [ 4]  394 	ld	l, c
   0199 C3r00r00      [10]  395 	jp  ___sdcc_call_hl
                            396 ;src/StateManager.c:156: void statemanager_close_state(){
                            397 ;	---------------------------------
                            398 ; Function statemanager_close_state
                            399 ; ---------------------------------
   019C                     400 _statemanager_close_state::
                            401 ;src/StateManager.c:157: *(u8*)&closeState=1;
   019C 21r8Er00      [10]  402 	ld	hl,#_closeState
   019F 36 01         [10]  403 	ld	(hl),#0x01
   01A1 C9            [10]  404 	ret
                            405 ;src/StateManager.c:160: void statemanager_update_state(){
                            406 ;	---------------------------------
                            407 ; Function statemanager_update_state
                            408 ; ---------------------------------
   01A2                     409 _statemanager_update_state::
                            410 ;src/StateManager.c:161: stateArray[currentState].updateState();
   01A2 01r56r00      [10]  411 	ld	bc,#_stateArray+0
   01A5 21r8Fr00      [10]  412 	ld	hl,#_currentState + 0
   01A8 5E            [ 7]  413 	ld	e, (hl)
   01A9 16 00         [ 7]  414 	ld	d,#0x00
   01AB 6B            [ 4]  415 	ld	l, e
   01AC 62            [ 4]  416 	ld	h, d
   01AD 29            [11]  417 	add	hl, hl
   01AE 19            [11]  418 	add	hl, de
   01AF 29            [11]  419 	add	hl, hl
   01B0 19            [11]  420 	add	hl, de
   01B1 29            [11]  421 	add	hl, hl
   01B2 09            [11]  422 	add	hl,bc
   01B3 11 08 00      [10]  423 	ld	de, #0x0008
   01B6 19            [11]  424 	add	hl, de
   01B7 4E            [ 7]  425 	ld	c,(hl)
   01B8 23            [ 6]  426 	inc	hl
   01B9 66            [ 7]  427 	ld	h,(hl)
   01BA 69            [ 4]  428 	ld	l, c
   01BB C3r00r00      [10]  429 	jp  ___sdcc_call_hl
                            430 ;src/StateManager.c:164: void statemanager_exit_game(){
                            431 ;	---------------------------------
                            432 ; Function statemanager_exit_game
                            433 ; ---------------------------------
   01BE                     434 _statemanager_exit_game::
                            435 ;src/StateManager.c:165: *(u8*)&gameRunning=0;
   01BE 21r92r00      [10]  436 	ld	hl,#_gameRunning
   01C1 36 00         [10]  437 	ld	(hl),#0x00
   01C3 C9            [10]  438 	ret
                            439 ;src/StateManager.c:168: void statemanager_main_loop(){
                            440 ;	---------------------------------
                            441 ; Function statemanager_main_loop
                            442 ; ---------------------------------
   01C4                     443 _statemanager_main_loop::
                            444 ;src/StateManager.c:169: while(gameRunning) {
   01C4                     445 00101$:
   01C4 3Ar92r00      [13]  446 	ld	a,(#_gameRunning + 0)
   01C7 B7            [ 4]  447 	or	a, a
   01C8 C8            [11]  448 	ret	Z
                            449 ;src/StateManager.c:170: statemanager_drop_state();
   01C9 CDr00r00      [17]  450 	call	_statemanager_drop_state
                            451 ;src/StateManager.c:171: statemanager_change_state();
   01CC CDr9Dr00      [17]  452 	call	_statemanager_change_state
                            453 ;src/StateManager.c:172: statemanager_manage_input();
   01CF CDr50r01      [17]  454 	call	_statemanager_manage_input
                            455 ;src/StateManager.c:173: statemanager_update_state();
   01D2 CDrA2r01      [17]  456 	call	_statemanager_update_state
                            457 ;src/StateManager.c:174: statemanager_render_state();
   01D5 CDr7Dr01      [17]  458 	call	_statemanager_render_state
   01D8 18 EA         [12]  459 	jr	00101$
                            460 	.area _CODE
                            461 	.area _INITIALIZER
                            462 	.area _CABS (ABS)
