                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module State_MainMenu
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _draw_main_bg
                             12 	.globl _dec_main_bg
                             13 	.globl _level_set_level
                             14 	.globl _player_init
                             15 	.globl _remove_music
                             16 	.globl _statemanager_exit_game
                             17 	.globl _statemanager_input_accepted
                             18 	.globl _statemanager_set_state
                             19 	.globl _ui_mainmenu_render_refresh
                             20 	.globl _ui_mainmenu_render_all
                             21 	.globl _ui_mainmenu_unselect_entry
                             22 	.globl _ui_mainmenu_select_entry
                             23 	.globl _ui_mainmenu_previous_entry
                             24 	.globl _ui_mainmenu_next_entry
                             25 	.globl _ui_mainmenu_is_selected
                             26 	.globl _ui_mainmenu_get_entry
                             27 	.globl _ui_mainmenu_init
                             28 	.globl _cpct_hflipSpriteM0
                             29 	.globl _cpct_drawSprite
                             30 	.globl _cpct_isKeyPressed
                             31 	.globl _cpct_memcpy
                             32 	.globl _cpct_memset
                             33 	.globl _state_mainmenu_enter
                             34 	.globl _state_mainmenu_return
                             35 	.globl _state_mainmenu_input
                             36 	.globl _state_mainmenu_update
                             37 	.globl _state_mainmenu_render
                             38 	.globl _state_mainmenu_exit
                             39 ;--------------------------------------------------------
                             40 ; special function registers
                             41 ;--------------------------------------------------------
                             42 ;--------------------------------------------------------
                             43 ; ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DATA
                             46 ;--------------------------------------------------------
                             47 ; ram data
                             48 ;--------------------------------------------------------
                             49 	.area _INITIALIZED
                             50 ;--------------------------------------------------------
                             51 ; absolute external ram data
                             52 ;--------------------------------------------------------
                             53 	.area _DABS (ABS)
                             54 ;--------------------------------------------------------
                             55 ; global & static initialisations
                             56 ;--------------------------------------------------------
                             57 	.area _HOME
                             58 	.area _GSINIT
                             59 	.area _GSFINAL
                             60 	.area _GSINIT
                             61 ;--------------------------------------------------------
                             62 ; Home
                             63 ;--------------------------------------------------------
                             64 	.area _HOME
                             65 	.area _HOME
                             66 ;--------------------------------------------------------
                             67 ; code
                             68 ;--------------------------------------------------------
                             69 	.area _CODE
                             70 ;src/State_MainMenu.c:24: void dec_main_bg(){
                             71 ;	---------------------------------
                             72 ; Function dec_main_bg
                             73 ; ---------------------------------
   0000                      74 _dec_main_bg::
   0000 DD E5         [15]   75 	push	ix
   0002 DD 21 00 00   [14]   76 	ld	ix,#0
   0006 DD 39         [15]   77 	add	ix,sp
   0008 21 F7 FF      [10]   78 	ld	hl,#-9
   000B 39            [11]   79 	add	hl,sp
   000C F9            [ 6]   80 	ld	sp,hl
                             81 ;src/State_MainMenu.c:29: newPos=0;
   000D DD 36 F7 00   [19]   82 	ld	-9 (ix),#0x00
                             83 ;src/State_MainMenu.c:30: texture_set = menu_bg;
   0011 DD 36 FAr00   [19]   84 	ld	-6 (ix),#<(_menu_bg)
   0015 DD 36 FBs00   [19]   85 	ld	-5 (ix),#>(_menu_bg)
                             86 ;src/State_MainMenu.c:32: position=MANUALLY_ALLOCATED_MEMORY_START;
   0019 01 D0 88      [10]   87 	ld	bc,#0x88D0
                             88 ;src/State_MainMenu.c:33: *position=0;
   001C 21 D0 88      [10]   89 	ld	hl,#0x88D0
   001F 36 00         [10]   90 	ld	(hl),#0x00
                             91 ;src/State_MainMenu.c:36: while(length){
   0021 11 F1 05      [10]   92 	ld	de,#0x05F1
   0024                      93 00106$:
   0024 7A            [ 4]   94 	ld	a,d
   0025 B3            [ 4]   95 	or	a,e
   0026 CArA6r00      [10]   96 	jp	Z,00108$
                             97 ;src/State_MainMenu.c:37: value = g_colors[(*texture_set)&0x0F];
   0029 DD 6E FA      [19]   98 	ld	l,-6 (ix)
   002C DD 66 FB      [19]   99 	ld	h,-5 (ix)
   002F 7E            [ 7]  100 	ld	a,(hl)
   0030 DD 77 FF      [19]  101 	ld	-1 (ix), a
   0033 E6 0F         [ 7]  102 	and	a, #0x0F
   0035 C6r00         [ 7]  103 	add	a,#<(_g_colors)
   0037 6F            [ 4]  104 	ld	l,a
   0038 3Es00         [ 7]  105 	ld	a,#>(_g_colors)
   003A CE 00         [ 7]  106 	adc	a, #0x00
   003C 67            [ 4]  107 	ld	h,a
   003D 6E            [ 7]  108 	ld	l,(hl)
                            109 ;src/State_MainMenu.c:38: counter = ((*texture_set)>>4)+1;
   003E DD 7E FF      [19]  110 	ld	a,-1 (ix)
   0041 07            [ 4]  111 	rlca
   0042 07            [ 4]  112 	rlca
   0043 07            [ 4]  113 	rlca
   0044 07            [ 4]  114 	rlca
   0045 E6 0F         [ 7]  115 	and	a,#0x0F
   0047 3C            [ 4]  116 	inc	a
   0048 DD 77 FF      [19]  117 	ld	-1 (ix),a
                            118 ;src/State_MainMenu.c:39: while(counter){
   004B 7D            [ 4]  119 	ld	a,l
   004C E6 AA         [ 7]  120 	and	a, #0xAA
   004E DD 77 F8      [19]  121 	ld	-8 (ix),a
   0051 7D            [ 4]  122 	ld	a,l
   0052 E6 55         [ 7]  123 	and	a, #0x55
   0054 DD 77 FE      [19]  124 	ld	-2 (ix),a
   0057 DD 7E F7      [19]  125 	ld	a,-9 (ix)
   005A DD 77 FC      [19]  126 	ld	-4 (ix),a
   005D                     127 00103$:
   005D DD 7E FF      [19]  128 	ld	a,-1 (ix)
   0060 B7            [ 4]  129 	or	a, a
   0061 28 31         [12]  130 	jr	Z,00119$
                            131 ;src/State_MainMenu.c:40: *position=(*position)|((newPos&1)?(value&0b01010101):(value&0b10101010));
   0063 C5            [11]  132 	push	bc
   0064 FD E1         [14]  133 	pop	iy
   0066 0A            [ 7]  134 	ld	a,(bc)
   0067 DD 77 FD      [19]  135 	ld	-3 (ix),a
   006A DD 7E FC      [19]  136 	ld	a,-4 (ix)
   006D E6 01         [ 7]  137 	and	a, #0x01
   006F DD 77 F9      [19]  138 	ld	-7 (ix), a
   0072 B7            [ 4]  139 	or	a, a
   0073 28 05         [12]  140 	jr	Z,00111$
   0075 DD 7E FE      [19]  141 	ld	a,-2 (ix)
   0078 18 03         [12]  142 	jr	00112$
   007A                     143 00111$:
   007A DD 7E F8      [19]  144 	ld	a,-8 (ix)
   007D                     145 00112$:
   007D DD B6 FD      [19]  146 	or	a, -3 (ix)
   0080 FD 77 00      [19]  147 	ld	0 (iy), a
                            148 ;src/State_MainMenu.c:41: if(newPos&1){
   0083 DD 7E F9      [19]  149 	ld	a,-7 (ix)
   0086 B7            [ 4]  150 	or	a, a
   0087 28 03         [12]  151 	jr	Z,00102$
                            152 ;src/State_MainMenu.c:42: ++position;
   0089 03            [ 6]  153 	inc	bc
                            154 ;src/State_MainMenu.c:43: *position=0;
   008A AF            [ 4]  155 	xor	a, a
   008B 02            [ 7]  156 	ld	(bc),a
   008C                     157 00102$:
                            158 ;src/State_MainMenu.c:45: ++newPos;
   008C DD 34 FC      [23]  159 	inc	-4 (ix)
                            160 ;src/State_MainMenu.c:46: --counter;
   008F DD 35 FF      [23]  161 	dec	-1 (ix)
   0092 18 C9         [12]  162 	jr	00103$
   0094                     163 00119$:
   0094 DD 7E FC      [19]  164 	ld	a,-4 (ix)
   0097 DD 77 F7      [19]  165 	ld	-9 (ix),a
                            166 ;src/State_MainMenu.c:48: ++texture_set;
   009A DD 34 FA      [23]  167 	inc	-6 (ix)
   009D 20 03         [12]  168 	jr	NZ,00139$
   009F DD 34 FB      [23]  169 	inc	-5 (ix)
   00A2                     170 00139$:
                            171 ;src/State_MainMenu.c:49: --length;
   00A2 1B            [ 6]  172 	dec	de
   00A3 C3r24r00      [10]  173 	jp	00106$
   00A6                     174 00108$:
                            175 ;src/State_MainMenu.c:52: cpct_memcpy((MANUALLY_ALLOCATED_MEMORY_START+(40*83)),MANUALLY_ALLOCATED_MEMORY_START,(40*83));
   00A6 21 F8 0C      [10]  176 	ld	hl,#0x0CF8
   00A9 E5            [11]  177 	push	hl
   00AA 21 D0 88      [10]  178 	ld	hl,#0x88D0
   00AD E5            [11]  179 	push	hl
   00AE 21 C8 95      [10]  180 	ld	hl,#0x95C8
   00B1 E5            [11]  181 	push	hl
   00B2 CDr00r00      [17]  182 	call	_cpct_memcpy
                            183 ;src/State_MainMenu.c:53: cpct_hflipSpriteM0 (40, 83, (MANUALLY_ALLOCATED_MEMORY_START+(40*83)));
   00B5 21 C8 95      [10]  184 	ld	hl,#0x95C8
   00B8 E5            [11]  185 	push	hl
   00B9 21 28 53      [10]  186 	ld	hl,#0x5328
   00BC E5            [11]  187 	push	hl
   00BD CDr00r00      [17]  188 	call	_cpct_hflipSpriteM0
   00C0 DD F9         [10]  189 	ld	sp, ix
   00C2 DD E1         [14]  190 	pop	ix
   00C4 C9            [10]  191 	ret
                            192 ;src/State_MainMenu.c:56: void draw_main_bg(){
                            193 ;	---------------------------------
                            194 ; Function draw_main_bg
                            195 ; ---------------------------------
   00C5                     196 _draw_main_bg::
                            197 ;src/State_MainMenu.c:57: cpct_drawSprite (MANUALLY_ALLOCATED_MEMORY_START, cpctm_screenPtr(CPCT_VMEM_START, 0, 200-83),40,83);
   00C5 21 28 53      [10]  198 	ld	hl,#0x5328
   00C8 E5            [11]  199 	push	hl
   00C9 21 60 EC      [10]  200 	ld	hl,#0xEC60
   00CC E5            [11]  201 	push	hl
   00CD 21 D0 88      [10]  202 	ld	hl,#0x88D0
   00D0 E5            [11]  203 	push	hl
   00D1 CDr00r00      [17]  204 	call	_cpct_drawSprite
                            205 ;src/State_MainMenu.c:58: cpct_drawSprite ((MANUALLY_ALLOCATED_MEMORY_START+(40*83)), cpctm_screenPtr(CPCT_VMEM_START, 40, 200-83), 40, 83);
   00D4 21 28 53      [10]  206 	ld	hl,#0x5328
   00D7 E5            [11]  207 	push	hl
   00D8 21 88 EC      [10]  208 	ld	hl,#0xEC88
   00DB E5            [11]  209 	push	hl
   00DC 21 C8 95      [10]  210 	ld	hl,#0x95C8
   00DF E5            [11]  211 	push	hl
   00E0 CDr00r00      [17]  212 	call	_cpct_drawSprite
   00E3 C9            [10]  213 	ret
                            214 ;src/State_MainMenu.c:61: void state_mainmenu_enter(){
                            215 ;	---------------------------------
                            216 ; Function state_mainmenu_enter
                            217 ; ---------------------------------
   00E4                     218 _state_mainmenu_enter::
                            219 ;src/State_MainMenu.c:63: remove_music();
   00E4 CDr00r00      [17]  220 	call	_remove_music
                            221 ;src/State_MainMenu.c:64: cpct_memset(CPCT_VMEM_START, g_colors[7], 0x4000);
   00E7 21r07r00      [10]  222 	ld	hl, #(_g_colors + 0x0007) + 0
   00EA 46            [ 7]  223 	ld	b,(hl)
   00EB 21 00 40      [10]  224 	ld	hl,#0x4000
   00EE E5            [11]  225 	push	hl
   00EF C5            [11]  226 	push	bc
   00F0 33            [ 6]  227 	inc	sp
   00F1 26 C0         [ 7]  228 	ld	h, #0xC0
   00F3 E5            [11]  229 	push	hl
   00F4 CDr00r00      [17]  230 	call	_cpct_memset
                            231 ;src/State_MainMenu.c:65: setMenuPalette();
   00F7 CDr00r00      [17]  232 	call	_setMenuPalette
                            233 ;src/State_MainMenu.c:66: dec_main_bg();
   00FA CDr00r00      [17]  234 	call	_dec_main_bg
                            235 ;src/State_MainMenu.c:67: draw_main_bg();
   00FD CDrC5r00      [17]  236 	call	_draw_main_bg
                            237 ;src/State_MainMenu.c:68: camelot_warriors_mode=0;
   0100 21r00r00      [10]  238 	ld	hl,#_camelot_warriors_mode + 0
   0103 36 00         [10]  239 	ld	(hl), #0x00
                            240 ;src/State_MainMenu.c:69: ui_mainmenu_init();
   0105 CDr00r00      [17]  241 	call	_ui_mainmenu_init
                            242 ;src/State_MainMenu.c:70: ui_mainmenu_render_all();
   0108 CDr00r00      [17]  243 	call	_ui_mainmenu_render_all
   010B C9            [10]  244 	ret
                            245 ;src/State_MainMenu.c:74: void state_mainmenu_return() {
                            246 ;	---------------------------------
                            247 ; Function state_mainmenu_return
                            248 ; ---------------------------------
   010C                     249 _state_mainmenu_return::
                            250 ;src/State_MainMenu.c:75: cpct_memset(CPCT_VMEM_START, g_colors[7], 0x4000);
   010C 21r07r00      [10]  251 	ld	hl, #(_g_colors + 0x0007) + 0
   010F 46            [ 7]  252 	ld	b,(hl)
   0110 21 00 40      [10]  253 	ld	hl,#0x4000
   0113 E5            [11]  254 	push	hl
   0114 C5            [11]  255 	push	bc
   0115 33            [ 6]  256 	inc	sp
   0116 26 C0         [ 7]  257 	ld	h, #0xC0
   0118 E5            [11]  258 	push	hl
   0119 CDr00r00      [17]  259 	call	_cpct_memset
                            260 ;src/State_MainMenu.c:76: draw_main_bg();
   011C CDrC5r00      [17]  261 	call	_draw_main_bg
                            262 ;src/State_MainMenu.c:77: ui_mainmenu_render_all();
   011F CDr00r00      [17]  263 	call	_ui_mainmenu_render_all
   0122 C9            [10]  264 	ret
                            265 ;src/State_MainMenu.c:80: void state_mainmenu_input(){
                            266 ;	---------------------------------
                            267 ; Function state_mainmenu_input
                            268 ; ---------------------------------
   0123                     269 _state_mainmenu_input::
                            270 ;src/State_MainMenu.c:81: if(cpct_isKeyPressed(Key_CursorUp)){
   0123 21 00 01      [10]  271 	ld	hl,#0x0100
   0126 CDr00r00      [17]  272 	call	_cpct_isKeyPressed
   0129 7D            [ 4]  273 	ld	a,l
   012A B7            [ 4]  274 	or	a, a
   012B 28 06         [12]  275 	jr	Z,00107$
                            276 ;src/State_MainMenu.c:82: ui_mainmenu_previous_entry();
   012D CDr00r00      [17]  277 	call	_ui_mainmenu_previous_entry
                            278 ;src/State_MainMenu.c:83: statemanager_input_accepted();
   0130 C3r00r00      [10]  279 	jp  _statemanager_input_accepted
   0133                     280 00107$:
                            281 ;src/State_MainMenu.c:85: else if(cpct_isKeyPressed(Key_CursorDown)){
   0133 21 00 04      [10]  282 	ld	hl,#0x0400
   0136 CDr00r00      [17]  283 	call	_cpct_isKeyPressed
   0139 7D            [ 4]  284 	ld	a,l
   013A B7            [ 4]  285 	or	a, a
   013B 28 06         [12]  286 	jr	Z,00104$
                            287 ;src/State_MainMenu.c:86: ui_mainmenu_next_entry();
   013D CDr00r00      [17]  288 	call	_ui_mainmenu_next_entry
                            289 ;src/State_MainMenu.c:87: statemanager_input_accepted();
   0140 C3r00r00      [10]  290 	jp  _statemanager_input_accepted
   0143                     291 00104$:
                            292 ;src/State_MainMenu.c:89: else if(cpct_isKeyPressed(Key_Return)){
   0143 21 02 04      [10]  293 	ld	hl,#0x0402
   0146 CDr00r00      [17]  294 	call	_cpct_isKeyPressed
   0149 7D            [ 4]  295 	ld	a,l
   014A B7            [ 4]  296 	or	a, a
   014B C8            [11]  297 	ret	Z
                            298 ;src/State_MainMenu.c:90: ui_mainmenu_select_entry();
   014C CDr00r00      [17]  299 	call	_ui_mainmenu_select_entry
                            300 ;src/State_MainMenu.c:91: statemanager_input_accepted();
   014F C3r00r00      [10]  301 	jp  _statemanager_input_accepted
                            302 ;src/State_MainMenu.c:95: void state_mainmenu_update(){
                            303 ;	---------------------------------
                            304 ; Function state_mainmenu_update
                            305 ; ---------------------------------
   0152                     306 _state_mainmenu_update::
                            307 ;src/State_MainMenu.c:96: if(ui_mainmenu_is_selected()){
   0152 CDr00r00      [17]  308 	call	_ui_mainmenu_is_selected
   0155 7D            [ 4]  309 	ld	a,l
   0156 B7            [ 4]  310 	or	a, a
   0157 C8            [11]  311 	ret	Z
                            312 ;src/State_MainMenu.c:97: ui_mainmenu_render_refresh();
   0158 CDr00r00      [17]  313 	call	_ui_mainmenu_render_refresh
                            314 ;src/State_MainMenu.c:98: switch(ui_mainmenu_get_entry()){
   015B CDr00r00      [17]  315 	call	_ui_mainmenu_get_entry
   015E 5D            [ 4]  316 	ld	e,l
   015F 3E 04         [ 7]  317 	ld	a,#0x04
   0161 93            [ 4]  318 	sub	a, e
   0162 DAr00r00      [10]  319 	jp	C,_ui_mainmenu_unselect_entry
   0165 16 00         [ 7]  320 	ld	d,#0x00
   0167 21r6Dr01      [10]  321 	ld	hl,#00119$
   016A 19            [11]  322 	add	hl,de
   016B 19            [11]  323 	add	hl,de
                            324 ;src/State_MainMenu.c:99: case 0:{
   016C E9            [ 4]  325 	jp	(hl)
   016D                     326 00119$:
   016D 18 08         [12]  327 	jr	00101$
   016F 18 21         [12]  328 	jr	00102$
   0171 18 2A         [12]  329 	jr	00103$
   0173 18 33         [12]  330 	jr	00104$
   0175 18 3C         [12]  331 	jr	00105$
   0177                     332 00101$:
                            333 ;src/State_MainMenu.c:100: level_set_level(0);
   0177 AF            [ 4]  334 	xor	a, a
   0178 F5            [11]  335 	push	af
   0179 33            [ 6]  336 	inc	sp
   017A CDr00r00      [17]  337 	call	_level_set_level
   017D 33            [ 6]  338 	inc	sp
                            339 ;src/State_MainMenu.c:101: level_seed=0;
   017E 21 00 00      [10]  340 	ld	hl,#0x0000
   0181 22r00r00      [16]  341 	ld	(_level_seed),hl
                            342 ;src/State_MainMenu.c:102: player_init();
   0184 CDr00r00      [17]  343 	call	_player_init
                            344 ;src/State_MainMenu.c:103: statemanager_set_state(STATE_LOADLEVEL);
   0187 3E 03         [ 7]  345 	ld	a,#0x03
   0189 F5            [11]  346 	push	af
   018A 33            [ 6]  347 	inc	sp
   018B CDr00r00      [17]  348 	call	_statemanager_set_state
   018E 33            [ 6]  349 	inc	sp
                            350 ;src/State_MainMenu.c:104: break;
   018F C3r00r00      [10]  351 	jp	_ui_mainmenu_unselect_entry
                            352 ;src/State_MainMenu.c:106: case 1:{
   0192                     353 00102$:
                            354 ;src/State_MainMenu.c:107: statemanager_set_state(STATE_LOADGAME);
   0192 3E 0A         [ 7]  355 	ld	a,#0x0A
   0194 F5            [11]  356 	push	af
   0195 33            [ 6]  357 	inc	sp
   0196 CDr00r00      [17]  358 	call	_statemanager_set_state
   0199 33            [ 6]  359 	inc	sp
                            360 ;src/State_MainMenu.c:108: break;
   019A C3r00r00      [10]  361 	jp	_ui_mainmenu_unselect_entry
                            362 ;src/State_MainMenu.c:110: case 2:{
   019D                     363 00103$:
                            364 ;src/State_MainMenu.c:111: statemanager_set_state(STATE_OPTIONS);
   019D 3E 04         [ 7]  365 	ld	a,#0x04
   019F F5            [11]  366 	push	af
   01A0 33            [ 6]  367 	inc	sp
   01A1 CDr00r00      [17]  368 	call	_statemanager_set_state
   01A4 33            [ 6]  369 	inc	sp
                            370 ;src/State_MainMenu.c:112: break;
   01A5 C3r00r00      [10]  371 	jp	_ui_mainmenu_unselect_entry
                            372 ;src/State_MainMenu.c:114: case 3:{
   01A8                     373 00104$:
                            374 ;src/State_MainMenu.c:115: statemanager_set_state(STATE_CREDITS);
   01A8 3E 06         [ 7]  375 	ld	a,#0x06
   01AA F5            [11]  376 	push	af
   01AB 33            [ 6]  377 	inc	sp
   01AC CDr00r00      [17]  378 	call	_statemanager_set_state
   01AF 33            [ 6]  379 	inc	sp
                            380 ;src/State_MainMenu.c:116: break;
   01B0 C3r00r00      [10]  381 	jp	_ui_mainmenu_unselect_entry
                            382 ;src/State_MainMenu.c:118: case 4:{
   01B3                     383 00105$:
                            384 ;src/State_MainMenu.c:119: statemanager_exit_game();
   01B3 CDr00r00      [17]  385 	call	_statemanager_exit_game
                            386 ;src/State_MainMenu.c:122: }
                            387 ;src/State_MainMenu.c:123: ui_mainmenu_unselect_entry();
   01B6 C3r00r00      [10]  388 	jp  _ui_mainmenu_unselect_entry
                            389 ;src/State_MainMenu.c:127: void state_mainmenu_render() {
                            390 ;	---------------------------------
                            391 ; Function state_mainmenu_render
                            392 ; ---------------------------------
   01B9                     393 _state_mainmenu_render::
                            394 ;src/State_MainMenu.c:128: ui_mainmenu_render_refresh();
   01B9 C3r00r00      [10]  395 	jp  _ui_mainmenu_render_refresh
                            396 ;src/State_MainMenu.c:131: void state_mainmenu_exit(){
                            397 ;	---------------------------------
                            398 ; Function state_mainmenu_exit
                            399 ; ---------------------------------
   01BC                     400 _state_mainmenu_exit::
                            401 ;src/State_MainMenu.c:133: }
   01BC C9            [10]  402 	ret
                            403 	.area _CODE
                            404 	.area _INITIALIZER
                            405 	.area _CABS (ABS)
